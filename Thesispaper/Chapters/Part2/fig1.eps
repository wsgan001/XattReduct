%!PS-Adobe-3.0 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <7ED8><56FE>1.pdf
%%Creator: Adobe Acrobat 10.1.2
%%For: Eric
%%CreationDate: 2012/12/22, 21:57:45
%%BoundingBox: 0 3 157 620
%%HiResBoundingBox: 0 0 153.0713 626.4570
%%CropBox: 0 0 153.0713 626.4570
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1060 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="Acrobat PDFMaker 10.1 Visio 版"
   xmp:ModifyDate="2012-12-22T21:46:47+08:00"
   xmp:CreateDate="2012-12-22T21:46:44+08:00"
   xmp:MetadataDate="2012-12-22T21:46:47+08:00"
   pdf:Producer="Acrobat Distiller 10.1.2 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0760988d-9ff0-49f7-9a24-4be767b9c621"
   xmpMM:InstanceID="uuid:eca74a5b-cb0f-4391-abd1-270384535537">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Eric</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [153.071 626.457 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 0 
/Lookup <~
!!!!!~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -626.457 translate
pgsv
[-1 0 0 -1 153.071 626.457 ]ct
gsave
np
gsave
0 0 mo
0 626.457 li
153.071 626.457 li
153.071 0 li
cp
clp
gsave
-174.341 656.167 mo
-174.341 584.167 li
-174.277 584.039 li
-174.149 584.167 li
-174.149 656.167 li
-174.277 656.231 li
-174.341 656.167 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
false sop
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 652.459 mo
-174.661 648.366 li
-170.569 648.366 li
-170.569 652.459 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 652.459 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 648.366 mo
-174.661 644.274 li
-170.569 644.274 li
-170.569 648.366 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 648.366 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 644.274 mo
-174.661 640.182 li
-170.569 640.182 li
-170.569 644.274 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 644.274 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 640.182 mo
-174.661 636.089 li
-170.569 636.089 li
-170.569 640.182 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 640.182 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 636.089 mo
-174.661 631.997 li
-170.569 631.997 li
-170.569 636.089 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 636.089 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 631.997 mo
-174.661 627.904 li
-170.569 627.904 li
-170.569 631.997 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 631.997 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 627.904 mo
-174.661 623.812 li
-170.569 623.812 li
-170.569 627.904 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 627.904 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 623.812 mo
-174.661 619.72 li
-170.569 619.72 li
-170.569 623.812 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 623.812 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 619.72 mo
-174.661 615.627 li
-170.569 615.627 li
-170.569 619.72 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 619.72 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 615.627 mo
-174.661 611.535 li
-170.569 611.535 li
-170.569 615.627 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 615.627 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 611.535 mo
-174.661 607.443 li
-170.569 607.443 li
-170.569 611.535 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 611.535 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 607.443 mo
-174.661 603.35 li
-170.569 603.35 li
-170.569 607.443 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 607.443 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 603.35 mo
-174.661 599.258 li
-170.569 599.258 li
-170.569 603.35 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 603.35 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 599.258 mo
-174.661 595.166 li
-170.569 595.166 li
-170.569 599.258 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 599.258 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 595.166 mo
-174.661 591.073 li
-170.569 591.073 li
-170.569 595.166 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 595.166 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 591.073 mo
-174.661 586.981 li
-170.569 586.981 li
-170.569 591.073 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 591.073 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 586.981 mo
-174.661 582.888 li
-170.569 582.888 li
-170.569 586.981 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 586.981 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
false sop
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
22.9234 559.805 mo
53.9358 559.805 li
53.9998 559.741 li
59.8826 578.221 59.8826 598.043 53.9998 616.459 cv
53.9358 616.523 li
22.9234 616.523 li
22.9874 616.459 li
17.0406 598.043 17.0406 578.221 22.9874 559.741 cv
eclp
16.2094 617.29 mo
62.76 617.29 li
62.76 558.462 li
16.2094 558.462 li
cp
false sop
0 0 0 0 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[-46.5506 0 0 -58.8277 312.61 617.29 ]ct
<<
/T 1
/W 183 
/H 231 
/M[183 0 0 -231 0 231 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
]`/fH<F&U1<F&U1<F&U1<F&U1<F&U1<F>UhWWB<rp/Uie!FP]iWWB<rlr='nqWt3_YP%6^!FP]iWWB<r
lr='nqWt3_YP%6^!FP]iWWB<rlr='nqXpl`WWB<rlr='nqWt4!YPhI,<F&U1<F&U1<F&U1<F&U1<F&U3
qWt3_YP%6^!akf(mA^2jp$>ZZ?i',h!O)1_<<6J'm&C)ip%28[<<6J'm&C)ip$>ZZ?i',h!O)1_<<6J'
m&C/koi5#[<<6J'm&Co+rDd-'>ub01>ub01>ub01>ub01>ub8.m&C)ip$>ZZ?i'AoqPjS"p$>ZZ?i',h
!O)1_<<6J'm&C)ip$>ZZ?i'c%n#?Dlp$>ZZ?i',h!O)1_<<6J'm&C)ip$u,[<<6J'm&Co+rDd-'>ub01
>ub01>ub01>ub01>ub8.m&C)ip$>ZZ?i',h!O)1p<U`uh?i',h!O)1_<<6J'm&C)ip$>ZZ?i';mr2Ke$
p$>ZZ?i',h!O)1_<<6J'm&C)ip$>ZZ?i']#nZ!G0rDd-'>ub01>ub01>ub01>ub01>ub8.m&C)ip$>ZZ
?i',h!O)1c<W,nu?i',h!O)1_<<6J'm&C)ip$>ZZ?i',h!O)1n<Us,j?i',h!O)1_<<6J'm&C)ip$>ZZ
?i'5kri-g=rDd-'>ub01>ub01>ub01>ub01>ub8.m&C)ip$>ZZ?i',h!O)1_<<6J'qPs.e!O)1_<<6J'
m&C)ip$>ZZ?i',h!O)1a<<H6$?i',h!O)1_<<6J'm&C)ip$>ZZ?i',h$*X;->ub01>ub/?<F&U1<F&U1
<F&U1<F>UhWWB<rlr='nqWt3_YP%6^!FP]jWWK3(p$>ZZ?i',h!O)1_<<6J'm&C)ip$>ZZ?i'Ptor8%r
p$>ZZ?i',h!O)1_<<6J'm&Ci)rDd-'>ub01>ub01>ub01>ub01>u^o4qWt3_YP%6^!FP]iWWB<rlr='n
qWt3_YP%Wip/M-#qWt3_YP%6^!FP]iWWB<rlr='nqWt3^Y5n7^<<6J'm&C)ip$>ZZ?i',h(pEm<>ub01
>ub01>ub01>ub01>ub01?i'JrpSn7tp$>ZZ?i',h!O)1_<<6J'm&C)ip$>ZZ?i',h!O)1_<<6J'm&C)i
p$>ZZ?i',h!O)1h<VTPp?i',h!O)1_<<6J'm&Co+rDd-'>ub01>ub01>ub01>ub01>ub8.m&C,joi:BZ
!FP]iWWB<rlr='nqWt3_YP%6^!FP]qWqiXqYP%6^!FP]iWWB<rlr='nqWt3_YP%6^"(1o)WpZkfYP%6^
!FP]iWYhr<<F&U1<F&U1<F&U1<F&U1<F&U1<F>UhWWB<ro2YWe!FP]iWWB<rlr='nqWt3_YP%6^!FP]i
WWB<rr`/De!FP]iWWB<rlr='nqWt3_YP%6^!FP]oWr&dsYP%6^!+,a&m&Co+rDd-'>ub01>ub01>ub01
>ub01>ub8.m&C)ip$>ZZ?i',h!O)1i<VKJo?i',h!O)1_<<6J'm&C)ip$>ZZ?i',h!O)1_<<6J'm&C)i
p$>ZZ?i',h!O)1_<<6J'or@ee(pEm<>ub01>ub01>ub01>ub01>ub01?i',h!O)1_<<6J'm&C)ip$>Z[
?i$eiWWB<rlr='nqWt3_YP%6^!FP]iWWB<roMt]e!FP]iWWB<rlr='nqWt3_YP%6^!FP]iWWTI'<F$;=
>ub01>ub01>ub01>ub01>ub8.m&C)ip$>ZZ?i',h!O)1_<<6J'o;_Ye!O)1_<<6J'm&C)ip$>ZZ?i',h
!O)1_<<6J'ri5Fe!O)1_<<6J'm&C)ip$>ZZ?i',h!3bqm[Jta~>

%%EndBinary
grestore
np
f
grestore
gsave
22.9234 559.677 mo
54.0637 559.677 li
54.1277 559.741 li
55.2104 563.188 56.0769 566.694 56.8133 570.228 cv
57.4527 573.809 li
58.0346 577.989 58.4811 582.117 58.5397 586.341 cv
58.5397 589.922 li
58.4758 591.713 li
58.4118 593.503 li
58.1284 597.002 57.7927 600.81 57.133 604.245 cv
56.8133 605.972 li
56.046 609.553 li
55.1508 613.006 li
54.6392 614.796 li
54.1277 616.523 li
54.0637 616.586 li
22.9234 616.586 li
22.8595 616.523 li
22.8595 616.395 li
22.9234 616.395 li
22.8595 616.523 li
22.3479 614.796 li
21.8364 613.006 li
19.5802 605.059 18.3824 596.4 18.4474 588.132 cv
18.4474 586.341 li
18.5113 584.551 li
18.5753 582.761 li
18.7426 579.647 19.041 576.888 19.5344 573.809 cv
20.1738 570.228 li
20.8037 566.67 21.8055 563.194 22.8595 559.741 cv
22.9234 559.677 li
23.1152 559.677 li
23.1152 559.805 li
17.1983 577.965 17.2069 598.297 23.1152 616.459 cv
23.0513 616.586 li
22.9234 616.395 li
53.9358 616.395 li
53.8719 616.395 li
53.9358 616.395 li
53.8719 616.459 li
54.3834 614.732 li
59.5842 597.618 59.5991 578.644 54.3834 561.531 cv
53.8719 559.805 li
53.9998 559.869 li
22.9234 559.869 li
22.8595 559.805 li
22.9234 559.677 li
clp
gsave
-195.506 676.693 mo
438.618 676.693 li
438.618 -220.494 li
-195.506 -220.494 li
cp
18.5753 591.265 mo
18.6392 592.8 li
19.0367 600.837 20.4882 608.741 22.9234 616.395 cv
22.9874 616.523 li
53.9998 616.523 li
53.9998 616.331 li
56.6406 608.051 58.1039 599.451 58.3479 590.753 cv
58.4118 585.51 li
58.3479 585.51 li
58.284 583.784 li
57.9142 575.783 56.4968 567.754 54.0637 560.125 cv
53.9998 559.869 li
22.9874 559.805 li
22.9234 559.869 li
22.1603 562.227 21.5081 564.618 20.9412 567.031 cv
20.8772 567.35 li
20.7493 567.862 li
19.6996 572.606 19.0122 577.401 18.7032 582.249 cv
18.6392 583.4 li
18.5753 584.935 li
eclp
17.3604 617.674 mo
59.8186 617.674 li
59.8186 558.846 li
17.3604 558.846 li
cp
false sop
0 0 0 0 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[-42.4583 0 0 -58.8277 311.459 617.674 ]ct
<<
/T 1
/W 167 
/H 231 
/M[167 0 0 -231 0 231 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
XoAComSt$0qPq-,\uN?A\uN?A\uN?A\uN?A^\."p!FP-[WWBm-mSs9plL(YQ^\."p!FP-[WWKs.<UWog
?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z"2FM/<U`uh?g@'Z!Pe<q<>Js<Wk,4AWk,4AWk,4AWk,4AWk,4F
p$Pf\?g@'Z!Pe=,<Uj&i?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe=+<Us,j?g@'Z!Pe<q<<6Ilm]$<&
p$Pf\?g@'Z!Pe=*<V'3+?i$e6Wk,4AWk,4AWk,4AWk,4AWk\5p<<6Ilm]$<&p$Pf\?g@'Z!Pe=)<V08l
?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe=(<V9>m?g@'Z!Pe<q<<6Ilm]$<&p$Pfq?i$e6Wk,4AWk,4A
Wk,4AWk,4AWk\6&<VBDn?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe=&<VKJo?g@'Z!Pe<q<<6Ilm]$<&
p$Pf\?g@'Z!Pe=%<VTPp?g@'Z!Pe<q<>Js<Wk,4AWk,4AWk,4AWk,4AWk,4Fp$Pf\?g@'Z!Pe=$<V]Vq
?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe=#<Vf\r?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe="<Voc3
?i$e6Wk,4AWk,4AWk,4AWk,4AWk\5p<<6Ilm]$<&p$Pf\?g@'Z!Pe=!<W#ht?g@'Z!Pe<q<<6Ilm]$<&
p$Pf\?g@'Z!Pe<u<W,nu?g@'Z!Pe<q<<6Ilm]$<&p$Pfq?i$e6Wk,4AWk,4AWk,4AWk,4AWk\5s<W5u!
?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe<s<<H6$?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe<r<<?0-
lL(YQ^\."p(16p<\uN?A\uN?A\uN?A\uN?A\uNO<mSs9plL(YQ^\."p!FP-[WWBm-mSs9plL(YQ^\."p
!FP-[WWBm-mSs6o!:'!P!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe<q<<6J''WSaE\uN?A\uN?A\uN?A\uN?A
^\."p!FP-[WWBm-mSs9plL(YQ^\."p!ak5mn#?E'p$Pf\?g@'Z!Pe<q<<6Ilm]$<&p$Pf^?g=Ykn>ZN(
p$Pf\?g@'Z!Pe<q<>Js<Wk,4AWk,4AWk,4AWk,4AWk,4Fp$Pf\?g@WjnYuW)p$Pf\?g@'Z!Pe<q<<6Il
m]$<&p$Pf\?g@Tinu;`*p$Pf\?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@Qho;Vi+p$Pfq?i$e6Wk,4AWk,4A
Wk,4AWk,4AWk\5p<<6Ilm]$<&p$Pf\?g@NgoVqr,p$Pf\?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@Kfor8&-
p$Pf\?g@'Z!Pe<q<<6Ilm]$<&p$Pfd?i$e6Wk,4AWk&V=\uN?A\uN?A\uNO<mSs9plL(YQ^\."p!FP-[
WWBm-mSs9plM.CRWWBm-mSs9plL(YQ^\."p!FP-[WWBm-mSs9plM%=RWWBm-mSs6o!:'!P!Pe<q<>Js<
Wk,4AWk,4AWk,4AWk,4AWk,4Fp$Pf\?g@'Z!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe<q<<6Ilm]$<&p$Pf]
?g=Z[WWBm-mSs9plL(YQ^\."p!FP-[WWBm-mSs?rqPq+>Wk,4AWk,4AWk,4AWk,4AWk\5p<<6Ilm]$<&
p$Pf\?g@'Z!Pe<q<<6Ilri5Lg!Pe<q<<6Ilm]$<&p$Pf\?g@'Z!Pe<q<<6IlrMoFg!Pe<q<<6Ilm]$9%
_Z,,~>

%%EndBinary
grestore
np
f
grestore
grestore
gsave
54.1277 559.805 mo
53.5522 561.531 li
48.2524 579.341 48.3866 598.777 54.1277 616.459 cv
54.1277 616.523 li
53.9998 616.586 li
53.8719 616.523 li
53.3604 614.796 li
50.776 606.28 49.3916 597.038 49.4598 588.132 cv
49.4598 586.341 li
49.5238 584.551 li
49.5877 582.761 li
49.7507 579.628 50.0524 576.904 50.5469 573.809 cv
51.1863 570.228 li
51.8161 566.67 52.8179 563.194 53.8719 559.741 cv
53.9358 559.677 li
54.1277 559.677 li
54.1277 559.805 li
clp
gsave
-195.506 676.693 mo
438.618 676.693 li
438.618 -220.494 li
-195.506 -220.494 li
cp
18.5753 591.265 mo
18.6392 592.8 li
19.0367 600.837 20.4882 608.741 22.9234 616.395 cv
22.9874 616.523 li
53.9998 616.523 li
53.9998 616.331 li
56.6406 608.051 58.1039 599.451 58.3479 590.753 cv
58.4118 585.51 li
58.3479 585.51 li
58.284 583.784 li
57.9142 575.783 56.4968 567.754 54.0637 560.125 cv
53.9998 559.869 li
22.9874 559.805 li
22.9234 559.869 li
22.1603 562.227 21.5081 564.618 20.9412 567.031 cv
20.8772 567.35 li
20.7493 567.862 li
19.6996 572.606 19.0122 577.401 18.7032 582.249 cv
18.6392 583.4 li
18.5753 584.935 li
eclp
gsave
-195.506 -220.503 mo
438.81 -220.503 li
438.81 676.811 li
-195.506 676.811 li
cp
clp
53.2325 616.906 mo
53.2325 612.814 li
57.3248 612.814 li
57.3248 616.906 li
cp
false sop
0 0 0 0 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 616.906 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 612.814 mo
53.2325 608.721 li
57.3248 608.721 li
57.3248 612.814 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 612.814 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 608.721 mo
53.2325 604.629 li
57.3248 604.629 li
57.3248 608.721 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 608.721 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 604.629 mo
53.2325 600.537 li
57.3248 600.537 li
57.3248 604.629 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 604.629 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 600.537 mo
53.2325 596.444 li
57.3248 596.444 li
57.3248 600.537 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 600.537 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 596.444 mo
53.2325 592.352 li
57.3248 592.352 li
57.3248 596.444 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 596.444 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 592.352 mo
53.2325 588.26 li
57.3248 588.26 li
57.3248 592.352 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 592.352 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 588.26 mo
53.2325 584.167 li
57.3248 584.167 li
57.3248 588.26 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 588.26 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 584.167 mo
53.2325 580.075 li
57.3248 580.075 li
57.3248 584.167 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 584.167 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 580.075 mo
53.2325 575.983 li
57.3248 575.983 li
57.3248 580.075 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 580.075 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 575.983 mo
53.2325 571.89 li
57.3248 571.89 li
57.3248 575.983 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 575.983 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 571.89 mo
53.2325 567.798 li
57.3248 567.798 li
57.3248 571.89 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 571.89 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 567.798 mo
53.2325 563.706 li
57.3248 563.706 li
57.3248 567.798 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 567.798 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
53.2325 563.706 mo
53.2325 559.613 li
57.3248 559.613 li
57.3248 563.706 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 275.587 563.706 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
grestore
grestore
gsave
21.5166 561.212 mo
52.5291 561.212 li
58.4758 579.627 58.4758 599.45 52.5291 617.929 cv
21.5166 617.929 li
15.6339 599.45 15.6339 579.627 21.5166 561.212 cv
eclp
17.0406 617.984 mo
57.0051 617.984 li
57.0051 561.202 li
17.0406 561.202 li
cp
false sop
gsave
grestore
/146472552.0 
<<
/ID /146472552.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
0 128 mo
32 128 li
32 0 li
0 0 li
cp
false sop
/0 /CSD get_res idxcs
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[-32 0 0 -128 328.819 128 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,g]g3$]7K#D>EP:q1$o*=mro@So+\<\5,H7Uo<*jE<[.O@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GQ$8#0$s<4ZX!SPQ1`C/m<k<ioH)<bjr+#Q~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/146472552.0 /Pattern get_res
[0 -1.77606 -.3125 0 56.9649 617.918 ]make_pattern set_pattern
f
2 vmreclaim
grestore
.250444 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
21.5166 561.212 mo
52.5291 561.212 li
58.4758 579.627 58.4758 599.45 52.5291 617.929 cv
21.5166 617.929 li
15.6339 599.45 15.6339 579.627 21.5166 561.212 cv
false sop
0 0 0 .863462 cmyk
@
52.5291 561.212 mo
46.6463 579.627 46.6463 599.45 52.5291 617.929 cv
@
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB')~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB')~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB')~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
61.0335 559.805 mo
124.849 559.805 li
124.849 559.741 li
134.312 577.517 134.312 598.746 124.849 616.459 cv
124.849 616.523 li
61.0335 616.523 li
61.0974 616.459 li
51.6339 598.746 51.6339 577.517 61.0974 559.741 cv
eclp
50.8026 617.29 mo
134.184 617.29 li
134.184 558.462 li
50.8026 558.462 li
cp
0 0 0 0 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[-83.3819 0 0 -58.8277 278.017 617.29 ]ct
<<
/T 1
/W 327 
/H 231 
/M[327 0 0 -231 0 231 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
LAq8=ri4eS!Pe<]<<6Ilg8Y1gp%h\I<@VAPWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk,4Fp"ECH?g@?bjf/?rp"ECH?g?@F!Pe<u<U!Ka?g?@F!Pe<]<<6Ilm],ZS!Pe<]<<6Ilg8Y1gp$,QI
<<6Ilg8Y1gp"ECH?g?dRor8&-p"ECq?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4A
Wk\5d<V]Vq?g?@F!Pe<]<<6IlhQ$OS!Pe<]<<6Ilg8Y1gp"ECH?g?@F!Pe<]<<6Ilg8Y7ioi5#I<<6Il
g8Y1gp"ECH?g@Ngi2Qgmp"ECq?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\6$
<TI-\?g?@F!Pe<]<<6Ilo;_#S!Pe<]<<6Ilg8Y1gp$YoI<<6Ilg8Y1gp"ECH?g?sWn>ZN(p"ECH?g?@F
!Pe<j<V08l?g?@F!Pe<]<?GTEWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk&P;\uN?A\uN?A^\-;\
!FP-GWWBm-hc9SS!FP-GWWBm-g/S/\lJ&<?Wk\5\<<6Ilg8Y1gp"ECI?g=ZGWWBm-g/S/\lIr6=^\.M)
hc0\alIr6=^\-;\$=EY0\uN?A\uN?A+1eJ`Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp"ECH?g?@F
!Pe="<Td?_?g?@F!Pe<]<<6Iln>bfS!Pe<]<<6Ilg8Y1gp$>]I<<6Ilg8Y1gp"ECH?g?jTo;Vi+p"ECH
?g?@F!Pe<g<VKKC?i$e6Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5\<<6Ili2Z[S
!Pe<]<<6Ilg8Y1gp"WOL<E3Dkg8Y1gp"ECH?g?@F!Pe<]<<6Ilg8Y1gp"ECG?NBBFWWBm-g/S/\lIr6=
^\.S+h,Pq3qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-;\!FP-gWo9rY^\-;\
!FP-GWWBm-p/U3S!FP-GWWBm-g/S/\lLLt>WWBm-g/S/\lIr6=^\."pm8X0olIr6=^\-;\!FP-WWq!(i
^\-;\.UW%P\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<k#M(S!FP-GWWBm-g/S/\
lJei>WWBm-g/S/\lIr6=^\-G`rD`l*lIr6=^\-;\!FP-GWWBm-g/S/\lIr6=^\-;\"(1>nWnaTT^\-;\
.UW%P\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<qc2QS!FP-GWWBm-g/S/\lM%=>
WWBm-g/S/\lIr6=^\.1ukZ%XjlIr6=^\-;\!FP-\WpH_d^\-;\!FP-GWWBm-lW*FS!FP-GWWBm-g/T)!
qPq-,\uN?A\uN?A\uN?A\uN?A\uN?A\uN=OWk,4AWk,4AWk,4AWk\5\<<6Ilg8Y1gp#B'I<<6Ilg8Y1g
p"ECH?g?OKr2Ke4p"ECH?g?@F!Pe<^<<?0-lIr6=^\-;\!FP-GWWKs.<SLLS?g?@F!Pe<]<<ch,Wk,4A
W[#*T\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A^\-;\!FP-GWWBm-pf6?S!FP-GWWBm-g/S/\
lL_+>WWBm-g/S/\lIr6=^\.(rlW!smlIr6=^\-;\!FP-YWpcqg^\-;\!FP-GWWBm-kZ.4S.UW%P\uN?A
\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uN?A\uNO<g/S/\lK"u>WWBm-g/S/\lIr6=^\-Mbqc*Z(
lIr6=^\-;\!FP-IWWT9$^\-;\!FP-GWWBm-g/S/\lIr6=^\-;\!FP-GWW9d6p"ECq?i$e6Wk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk\5\<<6Ilri4eS!Pe<]<<6Ilg8Y1gp%h\I<<6Ilg8Y1g
p"ECH?g@?bjf/?rp"ECH?g?@F!Pe<u<U!Ka?g?@F!Pe<]<<6Ilm],ZS!Pe<]<@VAPWk,4AWk,4AWk,4A
Wk,4AWk,4AWk,4AWk,4AWk,4AWk,4AWk,4Fp$,QI<<6Ilg8Y1gp"ECH?g?dRor8&-p"ECH?g?@F!Pe<e
<V]Vq?g?@F!Pe<]<<6IlhQ$OS!Pe<]<<-C1s/uBP~>

%%EndBinary
grestore
np
f
grestore
gsave
61.0335 559.677 mo
124.849 559.677 li
124.785 559.869 li
124.977 559.677 li
125.872 561.404 li
134.157 578.24 134.131 598.021 125.872 614.86 cv
124.977 616.523 li
124.977 616.395 li
124.977 616.586 li
61.0335 616.586 li
60.9696 616.523 li
60.9696 616.395 li
60.9696 616.523 li
60.1383 614.86 li
51.765 598.255 51.8449 578.057 60.0744 561.404 cv
60.9696 559.677 li
61.1614 559.677 li
61.1614 559.805 li
60.3301 561.468 li
56.4104 569.482 54.5156 577.381 54.1277 586.277 cv
54.1277 589.922 li
54.5252 599.442 56.7206 607.952 61.1614 616.395 cv
61.1614 616.586 li
61.0335 616.395 li
124.849 616.395 li
124.785 616.523 li
124.785 616.395 li
134.194 598.583 134.183 577.626 124.785 559.805 cv
124.785 559.677 li
124.977 559.677 li
124.977 559.805 li
124.849 559.869 li
61.0335 559.869 li
60.9696 559.805 li
61.0335 559.677 li
clp
gsave
-195.506 676.693 mo
438.618 676.693 li
438.618 -220.494 li
-195.506 -220.494 li
cp
53.9998 590.306 mo
54.0637 591.713 li
54.1916 593.375 li
54.6595 598.806 55.9 604.266 57.8364 609.361 cv
57.9642 609.745 li
58.0282 609.872 li
58.885 612.125 59.9209 614.323 61.0335 616.459 cv
61.0975 616.523 li
124.849 616.523 li
124.849 616.459 li
129.12 608.411 131.547 599.52 131.883 590.37 cv
131.947 585.83 li
131.883 585.83 li
131.819 584.487 li
131.305 575.938 128.941 567.47 124.913 559.933 cv
124.913 559.805 li
61.0335 559.805 li
60.7778 560.317 li
60.7138 560.38 li
59.4467 562.885 58.2904 565.461 57.3888 568.118 cv
57.3248 568.245 li
56.6854 570.164 li
55.3405 574.59 54.4623 579.033 54.1277 583.656 cv
54.0637 584.551 li
53.9998 585.958 li
eclp
52.7849 617.674 mo
136.167 617.674 li
136.167 558.846 li
52.7849 558.846 li
cp
0 0 0 0 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[-83.3819 0 0 -58.8277 276.034 617.674 ]ct
<<
/T 1
/W 327 
/H 231 
/M[327 0 0 -231 0 231 ]
/BC 1 
/D[0 1 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 1
>>
%%BeginBinary: 1
img
K)aX+!;bEL!O)1M<<6J'qPrMS!O)1M<<6J'g8YRbrDd-'>ub01>ub01*F2ZN<F&U1<F&U1<F&U1<F&U1
<F&U1<F&U1<F>UVWWB<rg/S/\qXUZNWWB<rg/S/\qV%qMYP%<`m8X0oqV%qMYP$UL!FP]gWq!(iYP$UL
!FP]WWWB<rk#M(S!FP]WWWB<rg/S/\qVnONW[b4N<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1
<F&U1<F&U3qV%qMYP$aPrD`l*qV%qMYP$UL!FP]WWWB<rg/S/\qV%qMYP$UL"(1o)WnaTTYP$UL!FP]W
WWB<rqc2QS!FP]WWWB<rg/S/\qY.#NW[b4N<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1
<F&U3qV%qMYP%KekZ%XjqV%qMYP$UL!FP]lWpH_dYP$UL!FP]WWWB<rlW*FS!FP]WWWB<rg/S/\qWFmN
WWB<rg/S/\qV%qMYP$pUpf.?%qV%r!YPhI,<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1
<F>U[Wr/jtYP$UL!FP]WWWB<rgJn;T?i&KV!O)1M<<6J'g8Y4Xoi9aH!FP]WWWB<rg/S/\qY[ANWWB<r
g/S/\qV%qMYP%Zjj&H+eqV%r!YPhI,<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F>Up
WopA_YP$UL!FP]WWWB<rn5\dS!FP]WWWB<rg/S/\qWt6NWWB<rg/S/\qV%qMYP%*Zo2PfuqV%qMYP$UL
!FP]aWqWLoYP$UL!FP]WWZnYF<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<<lf0>ub01?i&KV
!O)1M<<6J'go:IVWiu*L<<6J'g8Y1Wp"ECH?i&KV!O)1M<<6J'g8Y.V!;5&G!FP]WWWB<rg/S/\qYmMN
WWB<rg/S/\qV%qTYPhI,<F&U1<?YXJ>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub8.g8Y1Wp"ECH
?i'Jrjf/?bp"ECH?i&KV!O)1e<U!Ka?i&KV!O)1M<<6J'm],ZS!O)1M<<6J'g8Y1Wp$,QI<<6J'g8Y1W
p"ECH?i&obor9LFrDd-'>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01?i&KV!O)1U<V]Vq
?i&KV!O)1M<<6J'hQ$OS!O)1M<<6J'g8Y1Wp"ECH?i&KV!O)1M<<6J'g8Y7Yoi5#I<<6J'g8Y1Wp"ECH
?i'Z"i2S91rDd-'>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01?i&KV!O)1j<TI-\?i&KV
!O)1M<<6J'o;_#S!O)1M<<6J'g8Y1Wp$YoI<<6J'g8Y1Wp"ECH?i')gn>ZMmp"ECH?i&KV!O)1Z<V08l
?i&KV.^/eN>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub8.j/VmS!O)1M<<6J'g8Y1W
p"rdI<<6J'g8Y1Wp"ECH?i&NW!iiHsg/S/\qV%qMYP$UL!akf(gSt:Xp"ECH?i&KV!O)1o<SpdW?i&KV
.^/eN>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub01>ub8.po<AS!O)1M<<6J'g8Y1Wp%28I
<<6J'g8Y1Wp"ECH?i'8ll`'uhp"ECH?i&KV!O)1_<UWog?i&KV!O)1M<<6J'kc46S!O)1M<<6J'g8Z3t
rDd-'>ub01>ub01>ub01>ub01>ub01>ub01>u_8<<F&U1<F&U1<F>UVWWB<rg/S/\qV\CNWWB<rg/S/\
qV%qMYP$[N"'&?.qV%qMYP$UL!FP]WWWB<rg/S/\qV%qMYP$UL!+,a&g8Y1Wp"ECH?i&KV"L%c(>u`1V
<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U3qV%qMYP$UL!FP^"Wo9rYYP$UL!FP]WWWB<r
p/U3S!FP]WWWB<rg/S/\qXUZNWWB<rg/S/\qV%qMYP%<`m8X0oqV%qMYP$UL!FP]gWq!)=YPhI,<F&U1
<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F&U1<F>UVWWB<rk#M(S!FP]WWWB<rg/S/\qVnONWWB<r
g/S/\qV%qMYP$aPrD`l*qV%qMYP$UL!+4FZY5a"~>

%%EndBinary
grestore
np
f
grestore
grestore
gsave
124.977 559.805 mo
124.145 561.468 li
115.531 578.709 115.861 599.419 124.977 616.395 cv
124.913 616.586 li
124.785 616.523 li
115.576 599.483 115.287 578.746 123.89 561.404 cv
124.785 559.677 li
124.913 559.677 li
124.977 559.805 li
clp
gsave
-195.506 676.693 mo
438.618 676.693 li
438.618 -220.494 li
-195.506 -220.494 li
cp
53.9998 590.306 mo
54.0637 591.713 li
54.1916 593.375 li
54.6595 598.806 55.9 604.266 57.8364 609.361 cv
57.9642 609.745 li
58.0282 609.872 li
58.885 612.125 59.9209 614.323 61.0335 616.459 cv
61.0975 616.523 li
124.849 616.523 li
124.849 616.459 li
129.12 608.411 131.547 599.52 131.883 590.37 cv
131.947 585.83 li
131.883 585.83 li
131.819 584.487 li
131.305 575.938 128.941 567.47 124.913 559.933 cv
124.913 559.805 li
61.0335 559.805 li
60.7778 560.317 li
60.7138 560.38 li
59.4467 562.885 58.2904 565.461 57.3888 568.118 cv
57.3248 568.245 li
56.6854 570.164 li
55.3405 574.59 54.4623 579.033 54.1277 583.656 cv
54.0637 584.551 li
53.9998 585.958 li
eclp
121.46 616.906 mo
121.46 612.814 li
125.552 612.814 li
125.552 616.906 li
cp
0 0 0 0 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 616.906 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 612.814 mo
121.46 608.721 li
125.552 608.721 li
125.552 612.814 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 612.814 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 608.721 mo
121.46 604.629 li
125.552 604.629 li
125.552 608.721 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 608.721 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 604.629 mo
121.46 600.537 li
125.552 600.537 li
125.552 604.629 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 604.629 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 600.537 mo
121.46 596.444 li
125.552 596.444 li
125.552 600.537 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 600.537 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 596.444 mo
121.46 592.352 li
125.552 592.352 li
125.552 596.444 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 596.444 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 592.352 mo
121.46 588.26 li
125.552 588.26 li
125.552 592.352 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 592.352 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 588.26 mo
121.46 584.167 li
125.552 584.167 li
125.552 588.26 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 588.26 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 584.167 mo
121.46 580.075 li
125.552 580.075 li
125.552 584.167 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 584.167 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 580.075 mo
121.46 575.983 li
125.552 575.983 li
125.552 580.075 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 580.075 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 575.983 mo
121.46 571.89 li
125.552 571.89 li
125.552 575.983 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 575.983 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 571.89 mo
121.46 567.798 li
125.552 567.798 li
125.552 571.89 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 571.89 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 567.798 mo
121.46 563.706 li
125.552 563.706 li
125.552 567.798 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 567.798 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
121.46 563.706 mo
121.46 559.613 li
125.552 559.613 li
125.552 563.706 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 207.359 563.706 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
grestore
gsave
59.6268 561.212 mo
123.442 561.212 li
132.906 578.924 132.906 600.217 123.442 617.929 cv
59.6268 617.929 li
50.1632 600.217 50.1632 578.924 59.6268 561.212 cv
eclp
52.4651 617.984 mo
130.54 617.984 li
130.54 561.202 li
52.4651 561.202 li
cp
gsave
grestore
/146472748.0 
<<
/ID /146472748.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
-1e-6 128 mo
32 128 li
32 0 li
-1e-6 0 li
cp
false sop
/0 /CSD get_res idxcs
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[-32 0 0 -128 328.819 128 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,g]g3$]7K#D>EP:q1$o*=mro@So+\<\5,H7Uo<*jE<[.O@Wn[3@'nb-^757;Rp>H>q_R=AlC^cenm@9
:1mM9jS"!dTMT<$3[GQ$8#0$s<4ZX!SPQ1`C/m<k<ioH)<bjr+#Q~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/146472748.0 /Pattern get_res
[0 -1.77606 -.610153 0 130.464 617.962 ]make_pattern set_pattern
f
2 vmreclaim
grestore
59.6268 561.212 mo
123.442 561.212 li
132.906 578.924 132.906 600.217 123.442 617.929 cv
59.6268 617.929 li
50.1632 600.217 50.1632 578.924 59.6268 561.212 cv
@
123.442 561.212 mo
113.978 578.924 113.978 600.217 123.442 617.929 cv
@
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB(L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB(L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB(L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e5b7d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966ebe3cc0a0000b18c00001eb868656164e625fe3e00000f640000
0036686865610dad124400000f9c00000024686d74780b0cadc000000fc0
00003c4a6c6f636101ab8c1e00004c0c00003c8c6d617870214303970000
8898000000206e616d651ee05f68000088b8000004c1707265706baf02fe
00008d7c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb8ae283e785f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000100000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000f03040e0000000000000000000001cf000004a1
002304a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a10023061bffcc061bffcc045a00ac044400610444
00610444006104440061044400610444006104ec00ac04ec009704ff001b
04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8
005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b
050c005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a0204
00280204ff390204ff310204ff500204ff4f0204ff7b0204001e02040027
049200ac028d0007028dffa9042800ac042800ac035d00ac035d00810362
00ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac
052a00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054f0063054f006306ef0063
042200ac042200ac05620063045800ac045800ac04580053045800ac03ad
004703ad004703ad001503ad001803ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa048a0022071e003d
071e003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6
001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d
03cb006d03cb006d03cb006d03cb006d046500a10465006a047700320477
0032038000a103800030038000a103800020038000200380002c03800029
03800042038000a1038000a1035000a10482006c0482006c0482006c0482
006c0482006c047800a10478008c049d004001ec00a101ecff5801ec0019
01ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b
00a1023e0000023eff8c03c900a103c900a102e000a102e0008702e600a1
02e000a102f0003203d500a1060600a1049100a1049100a1049100990491
0078049100a1046600a104aa006604aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604ba006604ba00660606006603c5
00a103c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049
034f0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359
001c0359001c048d009f048d009c048d009f048d0097048d0075048d009f
048d009f048d009f048d009f048d009f048d009f03fd0021063e0037063e
0037063e0037063e0037063e003703cc0036038300100383001003830010
03830010038300100369004403690044036900080369004403d5005c03d5
005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c
03d5005c03d5005c062f005c062f005c043400990362005a0362005a0362
004e036200570362005a0362005a076f005a06dd005a0601005a0601005a
04340060048c0060046a00600434006103fb005d03fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025
069a002508d5002504ab0025069b002508d50025043c0025043c0025043c
0025043c0025044f0025044f0025044f0025044f0025043c0025043c0025
067600250676002506760025067600250689002506890025068900250689
00250676002506760025043c0025043c0025067600250609002508430025
043c0025043c002504830025043c00250676002504ed002504ed00250513
00250728002503c4003503c4003503c4003503c4003503c4003504340060
04340060043400600434006004340060043400990434ffad0443fff901d6
008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff67
01d6001101d6009903c00085041e008801eaffd501eaffd501eaff6303a3
009903a3009903a3009901d6009901d6002a021c009901d6004b01fb001c
02fd0099066400990434009904340099043400990434004e0434009904a2
ff9d043400990438005a0438005a0438005a0438005a0438004f0438005a
0438005a0438005a0438005a043c005a043c005a06cc005a043400990434
00990434006002ca009902ca009902cafff902ca006e0321005103210051
0321fffe0321fffd032100510321005105ae005105ae00510438009901f1
009902ae002102c4002102ae002102bc002604e600210475002104750021
047500210475002104750021047500210475002104750021047500210475
002105130021074b002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d90021043400940434008e0434
0094043400860434004d0434008904340086043400940434009404340094
04340094039d002205b8003505b8003505b8003505b8003505b800350377
0029039f0022039f0022039f0022039f0022039f00220329005903290059
032900070329005903380072036100640378005d02ac004402e5006c024e
004402e5004802b8004701c100240297002a02e9006c01630061016dffd8
0297006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6
006c0230004201e3002302e9006c0285001f03ef002c027e00280286001f
023700420254000002750000029400000000fd080000fce8025600000275
0000029400000000fd080000fce803290000035f0000039400000000fc9f
0000fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a
000003a2000003a800000000fc650000fc600324000002f5000003460000
036700000000fca00000fc7e0327000003490000036a00000000fc9d0000
fc7d030c0000030f0000031100000000fcac0000fca90291000002980000
02a000000000fce90000fce202cf000002c2000002b5000003c1000003e1
0000040000000000fc520000fc3101ce000001d6000001ce000001ce0000
0000fd4d0000fd4d027500840000fd7a027f00840000fd7601f700840231
000004a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec7
03bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff520428
00ac0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac
042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e061300000427
0030060000900550005e0550fef903f4001003f40010040400a102fb00a1
03c90023038000a1038000a103690044047800a1047800a104b4006601ec
00a101ec000001ecff5403c900a103e10011060600a1049100a10387005e
04aa006604aa0066047800a103c500a1035b004b0359001c038300100383
0010038300100552000003cc00360558008704b1006604b10066048a0061
048a00610440009904320064039200180430000003a5005903a5005902c8
004e044c0099044c00990441006004780006023200940232ffec0232ff7a
0232ff0f03a3009903b4000004660099039700220302004d0303004d0438
005a0438005a046c002804120076044100590349005c0319000304550090
045500900455007d0455001605360055053b00550369001205a900940592
006405920064028900000000fd0a03f400000000fc360205009702050097
020500970224004801ff006e01ff006e04a10023044d00ad045a00ac0370
00ac037000ac037600ac0527000303e800ac03e8004503e8006106680055
03ca004b052200ac052200ac052200ac020400ac0204ff50028d00070458
00ac045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063
054c006304f900ac042200ac0444006103ad004703e6000f0438000f0438
000f04b800220594000004270030051c00ac04f500ac0472007406f200ac
071e00ac04eb000f061800ac044000ac0462005d04610062070800ac0471
005304ff000f04f2000f0504000003f4001003ee00a2040400a1031400a1
031400a1032700a10480000e038000a1038000300380002c057800440380
0057048900a1048900960489009501ec00a101ecff55023e000003ca00a1
03ca00a104320001060600a1047800a104aa006604a90066046a00a103c5
00a103cb006d034f00490359001c039d001e039d001b042f0022050a0000
03cc0036048e00a1046900a103fa006d062300a1064500a1045f00170583
00a103e800a103e4006b03f00066063200a103ff005c045f001f0463001f
044d000006010001063200a103d5005c044300000430000003d5009902c4
009902c4009902d5009901d6ff58047700170434006003fb005d03fb005d
03fb005d0583003e0362004b04530099045300780453008801d6008501d6
ff7201eaffd503b6009903b6009904150016060200130569005f04470099
062800990438005a0431005a042a009904340086043400990362005a0321
00510319000a06640099039f0022039f001803d2002204fe005103770029
045500990433009903c0004205d4009905fe0099044a000a0554009903c2
0099038b004d038d005d05c6009903cb00380453fff90443fff904270018
036e0000036e0000036e00000000fca50000fca5029b010a029b00bf029b
00bf03b5008503b5005e03b5005e03de0064026000ed026000b10364007a
0361005f01ff002a02240048022400bb020500970586009601ff008c01ff
002a01ff008c01ff002a035900880359002b035900880359002b01ff002a
0359002b02b6007402b600c002b6007402b600c004190075041900ad0419
0075041900ad0317000102df001f03af018a03fc01ae0317000b02df002d
027300450273004503fcfff603fcfff6073e0095073e0095073e0095073e
009503fcfff903fc00c10205009702050097026d0085026d007a027400bf
0274005a0284005602840075024000840240007a024a00b0024a0067026d
0085026d007a027400bf0274005a028400560284007503fc009e03fc0077
03fc007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335
008b057500000556000007f7000007270000073c00000727000006ad00af
06ad00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e
002a03fc0057040e00600434005803fc00b903fc004a040e005303fc006d
0419002b040e003403f30035039f006103be005f039f0058039f00250621
0049083300ac03fc002406e300a10411001d0494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc00580321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc0058029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002302b1ff4b03130044055f004405690044051700440569
0044052e00440553004405c9004e05c9004e0567004705b7004705a20047
05cd0027057d004505a20045052a003505b80048084e0048057d005c07c9
005c03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc0059
03fc004503fc006503fc004c03fc005503fc005603fc003d05e9002c0405
003506d300690443006102ed000703fc00080484003a0550005e04660099
066500660454005b0416004a073e009a073e0096073e00c9073e00c9070e
00af070e013a070e00af070e013a0a4e009a0638009f04660028018a0000
01da00000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601d004a1002304a1002304a1002304a1001904a1
001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a10023
03e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e8
003702040015020400a0054c0063054c0063054c0063054c0063054c0063
054c0063054c006305940063059400630594006305940063059400630594
0063052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa
05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5
ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb8
03d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fb
ffcb03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea
0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a0
004904a0005a043400940434009404d2009404d2009404d2008c04d20094
04d2004604d20094039f0022039f0002039f0022046a00530466003803f4
001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc8
03f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380
ffa70380ffa00380ffa20380ff8e0380001101ec000901ec009404aa0066
04aa006604aa002104aa002204aa002104aa002204aa006604ec006604ec
006604ec006604ec006604ec006604ec0066048d009f048d009f0515009f
0515009f0515009a0515009f051500750515009f038300100383fff10383
001001da0000046600000466000004660000046600000466000004660000
046600000466000004c10066052400ac052400ac050600ac049300a10493
00a1047c00a103e6000f02ae00210359001c01d60011043c0025043c0025
043c002506760025067600250676002502f5001c02e7008e0306005a034b
008e02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e
025b008e046d008e0375008d0375005a02d8008e0375005a029b00570280
0046025700040314005702e3001a0445002202b5001c028b001c02b80050
0000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c1
0000030cffff030c0000030cffff030c0002023100000231000001ffffff
01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa
009802aa009801ce008402aa008202aa008202aa008202aa0082027f008e
027f008e0324000002910084046601fd02aa001402aa0013032900000329
0000032900000329ffff039a00000327000003fcfff903fcfff9039a0000
039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000
fdc20000fdc201ce008402aa00140291008302aa001502aa009302aa0093
039a014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000
feb702aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000
039a0000039a0000039a0000039a000004010014040101470000000002aa
ffff02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c8
02aa00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b1
008402aaffff02aaffff075c003c075cffff075cffff075cffff075cffff
075c003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df
003001e7003201e7003200f8004400f8004402070030020700300209004c
0209004c019d0030019d003002070032020700320209004c0209004c0309
004c0309004c015f004c015f004c015200180152001801c3001601c30016
01bf001c01bf001c032700510327005103270051032700510000ffab03bd
ffff041a0000041a00000416000104160001041a0001041a0001041a0001
041a000104010002040100020401000204010002015f004c02aa00c801ce
00c803f100c804ec000f044d00ad0440001e0462005d049d006104ff001b
057e000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a
001c025000ac0226001b042800ac070900aa052affd6054c0063062f0061
04e4000f045800ac03ad004703ab0046043f000f03e6000f0550005e0522
00aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac
060300ac054700ac07b700ac071400ac04a100230204ff3a054c00630522
00aa052200aa052200aa052200aa052200aa04a1002304a10023061bffcc
050c005b050c005b04280073054c0063054c006303ca0008089500ac0815
00ac050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe1
03e8006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522
002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a10023
03e800ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444
ffe7035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e
02a10007050a00630469001a04a0001b04a10023045a00ac045a00ac045a
00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e80084
03e8008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc
00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac
042800a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d7
00ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063
054c0063042200ac042200ac045800ac045800ac04580077045800ac03ad
004703ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f
03e6000f052200aa052200aa052200aa052200aa052200aa048a0022048a
0022071e003d071e003d042700300427003003e6001e03bf001503bf003b
03bf003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2
003b0444003803ad005903b500ac046a0027043400990434000403b3005a
043400600430005d0271ffee064300990434009903a300990241002703b4
0014044c0099053e0059043400990321005102e0002102ae002103fc001b
0329005903ca004b0366003a03680050075d006003c00099061e009903d5
005601d6ff570438005a0434007a04340088043400880434008804340088
03fb006203d5005803d50058062f005c044cffe203c4003503a3003a0438
005a0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf
03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02ca
ff7302ca00100434ffff0434008703ca004b0434005104cd0060040e0052
034c005903d5005c03fb005d0438005a0438004f0438005a0438005a039f
00220289009804eb009902ae002106930060069200600362fff003210051
032900590394006403fb003c0240fff70240fff70434006002ff002703e2
002203720049040e00720321005101f300ad032900ad049700ac029b010a
03d5005c0434009904340099043400860362005a04340060043400600434
0060043400600434006003fb005d03fb005d03fb005d03fb003f03fb005d
0271002503c40035043400990434009904340067043400130434009401d6
ff1f01d6ff1f01d6ff5a03a3009903a3009903a3006b01d6008901d6ff58
01d6ff5801d6ff5906640099066400990664009904340099043400990434
0086043400860438004f0438004f0438005a0438005a0434009904340099
02ca009902ca008a02ca000a02caffff0321005103210051032100510321
00030321005102ae002102ae002102aeffd202aeffd20434008904340041
0434007b0434004d04340086039d0001039d002205b8003505b800350377
002903770029039f00220329000103290059032900000434008602aeffc6
05b80035039f002203d5005c01f100530241002703d5002902aeff960463
009903db00990344005903c200360362003b02ee003c03190099053b0055
0471000803ee00a203ee001403cb004803fc006d0477003204d3000803ee
00530380007204a40066038a00680350ffe80482006c03f300130232008e
01ecfffe03c900a1063200910491ffe804aa00660592006e0433000803ed
00a1034f0053035b004b038300080359001c04b10066048d009f03b70010
03690044039000570393006b0398005507ce00a1085500ac055a00a105cd
00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f
048d009f048d009f048d009f03f4001003f40010055cffe20482006c0482
006c03c9005204aa006604aa00660390000007ce00a1085500ac0482006c
065500a1046200a0049100a103f4ffc503f400100380ffb10380004d01ec
fed001ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f
039000570478008c049300a103c50057038c004403f40010038000a104aa
006604aa006604aa006604aa00660383001003f4001003cb002402e00027
0359ffeb0339005004040027048d002703fd00210380ffff023e0000048b
006603ed00270383000c039000550339005001f300ac032900ac049700ac
026000ed03f40010040400a1040400a10404006e03cb006d046500a10465
00a104650081046500a1046500950380002a038000260380004103800000
0380004a035000a10482006c047800a1047800a10478009a047800200478
00a101ecff2a01ecff5503c900a103c900a103c9007e02e000a102e00000
02e0002802e00024060600a1060600a1060600a1049100a1049100a10491
00a1049100a104aa006604aa006604aa006604aa006603c500a103c500a1
03ed00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f
0000034f00490359001c0359001c0359001803590019048d009f048d0079
048d009f048d0075048d009f03fd002103fd0021063e0037063e003703cc
003603cc003603830010036900050369004403690020047800a10359000a
063e00370383001003f4001002e00027035effa703c5002703ed00a104b6
00a103ef00a10369004403cb004803500060039900a1043c0025043c0025
0447002504470025043c0025043c0025044f0025043c0025043c00250676
002506760025068200250682002506760025067600250689002506760025
067600250475002104750021047500210475002104750021047500210475
0021047500210475002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002103d5009604340060043400990434
00990362003b039b005a043400600434006003fb006203fb0062051b0065
0362005a0362004b0435004b043b005d0241fff704340060043400600451
005a039d001f03d0001e0433009404340099043400990241002701d6fff3
0232009401d6009902e7ffa702f9002701d6009904860099066300940663
0094066400990434ffc204340099045300990438005a05b3005a05920064
0536005502ca002302ca002302ca002302ca009902ca0099028e0094028e
002303980085039800850321005101eaffd50242fff801eaffd5028affc4
02ae004102ae002104a400270476004904550090039d002205b80035039f
00220351001f0329005903d3005903bc004b03bb0056039400640394005e
039400640362005a0507005f03d50099043b005a046b005a04470099028a
ffc403a300270319009904340060039400640394005e066f006006d40060
0719006004f3002103c40021057a0021060c002504ae00990469009903ef
002c03ef00700434ffd5044dffd503d60010050fffe3062f006204120027
03cb006a0444009904590030033f0099036f005501d60085022700000391
009802f000300569005f045300990474005a03cb006304a9006604a80066
0528001406cc00560368003a0438005a0438005a03a8009903cf005203cf
0052033f001b046a009a0465004b05c7004b0664014c03de0020060e0035
034f0042032f00380321005103d0001e02f2009903de00200450009903a8
0099052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e
02a8008e02a800500344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375008d0375005a02b2004802d8008e029b0057
02570004031400570445002202ac004402ac006c02e50048042b004402e5
006c02e5004802b8004702b8004702770046027700460297002a01630061
0297006c0456006c02e6006c02e60045024e003602e6004502e6004502e5
006c01e3002302e9006c02db00460456006c0285001f024a000d02be006c
024600230283002803650055025f00180163006101f6006c02e9006c0285
001f02be006c0246002302e5006c03650050025f00180694009404bbffa7
04bd0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d
0014030fffa70329ffc203c4003b0304006e03c400350688002102410027
026900270468002704db002704c40027043400990451006002710025054c
0060041e009901f0006b067f0099045100990434009902ca006a037b0051
02faffd5039d002203ed0029033c0059047c005c04d800600434006003fb
005d0362005a0362004b03fb006201d600850362003b0233001e04d80094
0376004b02e5006b024e0044026e004402b200440277004201c1002401c1
00070297002a02e9006c0192000001aa006c0163006d0192000001e50000
0194006c017b00530224006e0456006c0456006c031b0000031c006c0304
006e02e600450336004502300042016dffd801e4002302e9000002b8002c
02e6006e02e6006e0285001f023700420294004202a600420272003c02e6
004502e9006c02e9006c016dffd801f6006c01f6002502030025028b006c
03ef002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce
008401ce0084029900650299006c03fc004503fc0065044b0044044b0044
025100f20256000002540000025100f20327000002540000025600000239
00980239009801ce008401ce008402aa008202aa008202aa008202aa0082
02aa004b02aa009302610024015e006c02300042027e00280299006c0310
009603100096031000960310009603100096045700960457009604570096
045700960310004304570043045700430457004304570043045700430457
00430457002f0457002f0457002f0457002f0457002f0310002f04570025
045700250457002504570025045700250310001a0457001a0457001a0457
001a0457001a0457001a0310004204570042045700420457004204570042
045700420457009604570096045700960457009603100042045700420457
0042045700420457004204570042045700420457002f0457002f0457002f
0457002f0457002f0310002f0457002f0457002f0457002f0457002f0457
002f03100026045700260457002604570026045700260457002603100042
045700420457004204570042045700420457004204570096045700960457
009604570096031000420457004204570042045700420457004204570042
031000260457002604570026045700260457002604570026031000230457
0023045700230457002304570023045700230310002f0457002f0457002f
0457002f0457002f0457002f0310004b0457004b0457004b0457004b0457
004b0457004b045700960457009604570096045700960310004204570042
045700420457004204570042045700420310001a0457001a0457001a0457
001a0457001a0457001a0310002404570024045700240457002404570024
045700240310002f0457002f0457002f0457002f0457002f0457002f0310
004e0457004e0457004e0457004e0457004e0457004e0457009604570096
045700960457009602aa006202aa006203290000049a00000359002b02aa
008502aa008502aa00c802aa00c8029100840254000003c1ffff03c10000
039a0000022400bb02aa009802aa009802aa009802aa00980440fff60440
fff60302009803270000032700000324000002aa0000071200d4071200d4
02ac004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d9
000001d90000028900000289000002890000028900000000fc660000fc66
032900000329000003290000032900000324000003240000032900000329
00000329000003290000032400000324000003f4000003f4000003f40000
03f40000032400000324000003270000030c000001ffffff01d900000327
000003290000032900000329000004660000046600000466000004660000
03f4000003f4000003f4000003f40000023200b6023200b6054c00630444
006104440043044400610444004303e6000e0456fec803e6000e03ad00ac
054c0063045d001e059700ac04a2000f04440061042200ac043200640375
005a037500420478000604d700510684001404120076041200030362005a
0362003b0362005a0362003b053b0055037800940438005a0399001404c5
009904a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d
03cb004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1
005b03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a
04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1
ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff22
04a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665
fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe82
04bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1
fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea4
04fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1
fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa
06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261
feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e
0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054c
fecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550
ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff06
05f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714
005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c
075dfeaa048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a048a0061048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a005a03a5005903a5005903a5004f03a50059
03a5005203a5005203a5005903a50059044c0099044c0092044c008f044c
0094044c0099044c0092044c0092044c0094044c0099044c0099044c0059
044c0099044c0099044c0092044c008f044c0094044c0099044c0092044c
0092044c0094044c0099044c0099044c0059023200010232ff860232ff83
0232ff62023200000232ff860232ff860232ff600232ff100232fecf0232
ff600232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a
0438005a0438005a0438005a0438005a0438005a0438005a041200760412
007604550090045500820455008204550084045500900455008204550082
045500840455001204550010045500800455009004550090045500410455
00710455007d059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006403f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001005b9001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b90010038000a10380004903800049038000a10380
004903800049038000a10380007b047800a1047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a10478006f0478
00a1047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec0009
01ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ec
ff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006603c500a103c500a1038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a038300100389001a038300100389001a0383
00100389001a038300100389001a0383fff50389fff5038300100389001a
038300100389001a04b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b100660675
006606750066067500660675006606750066067500660675006606750066
0675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1
fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa
04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060d
fe780599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc5
0665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c0
00ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a
06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6
fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000039a0000
03290000032900000324000003290000032900000324000003f4000003f4
00000324000001d9000003270000030c0000023200b601c4007901c40079
01c40079054e00ac0440000a042200ac0366001b044100ac06b2005503ca
004b04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac
051900610444006103e6000f03e6001e03e6001e0476003005d2000f049a
007404720074047200ad05f6002805f60028020400ac06680055045f00ac
050e000304fc00ac04fc00ac04720074070700ac04a1002304a10023061b
ffcc03e8005905250064052500640668005503ca001503ca004b052200ac
052200ac054c0063054c0063054c00630462004c0438000f0438000f0438
000f04720071035300ac061800ac0366001b048500300427003004400035
065d0037061d003d041a003d070f0003072800ac0515005b0521000f03ca
005a05090003045f009903df00270434009902f90027039f009905c0003e
0362004b03f4009903b6009903eb00270447000a0471009904d8009905f1
0099045c00590362005a0319000a039d0022039d002203b2002904c5000a
03ea004203c0004203c0009904c8001904c800190583003e03cf00990421
0016044700990454009903c0004205b6005f020400ac03d5002e03d50058
062f005c03fb005603fb006203fb00620583003e0362000803bc004b0453
0095045300970438005a0431005a0431005a038b0004039f0022039f0022
039f002203c0002902c400990554009902f9002703b10029037700290434
006006550060059b004b03ba004b061f001606500099044500500481000a
0362005a042b001604a800a103e8002703c500a10314002703ec00a105d0
004403800057041c00a103ca00a103ca002704530017049800a1050100a1
067700a104a2006503cb006d0359001c0383001003830010041300360545
001c041a006d03fa006d03fa00a1054f0020054f002001ec00a105780044
03ff00a1045a0001047800a104a100a103fa006d062f00a103f4001003f4
0010055cffe20380004204a2006504a20065057800440380000303900057
048900a0048900a004aa006604a9006604a9006603e4001e039d001e039d
001e039d001e03fa0044031400a1058300a1031400270417003603cc0036
03e8004a0588004a0559007203d8007205d20001061900a10488006c0444
001c03800068045c00010400000008000000040000000800000002af0000
02000000015500000450000001bc00000199000001000000000000000000
ffdc0000ff25040e0024040e00240329000003fcfff901ff008c03580088
01c400540334005404a400540476010a03fcfffb0273004404ee004f0444
00610444006103ad0027040e005306640099052a0020076000ac064800ac
071e002005f500ac0428001b03e6000f08a80032043afffe0482002104b2
005b0495002003ad0020044400610621004906210065057800e6059d00e6
03fc005e070100bc03fc0062045201d7045200be0400fff6040001bd0400
01bd0400fff6040001bd0400fff6070900aa045c005b047200ad04440071
04d0003a0562007403c9001006640094042f005f04180015035a0053040b
00300441006f03260010032700030327000303270003025400c0025400c0
025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e200140798
0003076c0061064100ac050b002406a700ac05c80055073f00ac03ca0021
0600009004b8001c085c0063054c003b076c0061076c006104440061056a
0022053400990433001b05af00990480001b060b0099034e001605a90094
03d2ffc40745005a049c005a06420059056a00220362005a06b8006d05c3
00a10453001205c000a1050b0046066400a10380002205580087042e0022
07f10066050f006806b0006d06b8006d039c006d03c7009602aa00db040e
008d0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b
0aa000b404d5009202d5008302d5008304d500b202d500700aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0000fc48000000000000fd170000000000000000039a0000039a00000324
00000324000003240000039a000003240000032400000256000003290000
0329000003bdffff02aaff8c055001e5027f008403240000039a00000256
000000000027000000e1000000ed0000001b032400000324000003240000
032400000324000003240000032400000324000003240000032400000000
0000000000000000000000000000039a0000039a00000346000000000027
03c10000030f00000346000003460000039a0000034800000348000003a2
000003a2000002560000035f00000000009e00000067000000220000009e
0000009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6
fe4703e6fe4703e6000e03e6000e03f4001003f4001003f4001005b80010
05b8001005b80010047800a1047800a10478006f063c00a1063c00a1063c
006f0383ffc80383ffc80383001004b1006604b1006604b1006606750066
06750066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000
fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc00
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff
0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000
fd340000fd340000fd340000fd340000fd600000fd600000fd730000fd73
0000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000
fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae
0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000
fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc65
0000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000
fc650000fc650000fc650000fc650000fc460000fd790000fcde0000fcde
0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000
fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde
0000fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000
fc970000fc970000fc560000fc560000fc910000fd820000fd820000fd70
0000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000
fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb
0000fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000
fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc26
0000fc290000fc290000fc270000fc270000fc270000fc270000fc350000
fc350000fc350000fc350000fdb60000fda80000fda80000fce30000fd46
0000fd460000fd470000fd470000fd020000fd020000fd020000fd020000
fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca1
0000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000
fc370000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd33
0000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000
fbff0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd
0000fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000
fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d6008904340060
043400600434006004340060043c0025067600250aa000b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b4000000>
<00000000000001420000014200000142000001420000025e0000025e0000
025e0000025e0000025e0000025e0000025e0000025e0000025e0000025e
0000025e0000025e0000025e0000025e0000035800000358000003580000
035800000358000003580000043200000432000004320000043200000432
000004320000043200000432000004320000043200000432000004320000
043200000432000005040000050400000504000005040000050400000504
000005040000050400000504000005040000050400000504000005040000
050400000504000005040000050400000504000005040000050400000504
000005040000050400000504000005a0000005a0000005a0000005a00000
05a0000005a0000006fa000006fa000006fa000006fa000006fa000006fa
000006fa000006fa000006fa000006fa000006fa000006fa000006fa0000
06fa000006fa000006fa000006fa000006fa000006fa000007ec000007ec
000007ec000007ec000007ec000007ec000007ec00000990000009900000
099000000990000009900000099000000990000009900000099000000990
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000aa600000aa600000aa60000
0aa600000aa600000aa600000aa600000aa600000aa600000aa600000aa6
00000aa600000aa600000aa600000aa600000c0400000c0400000c040000
0c0400000c0400000c0400000c0400000c0400000c0400000c0400000c04
00000c0400000c0400000d3600000d3600000d3600000d3600000d360000
0d3600000d3600000d3600000d3600000d3600000d3600000e6400000e64
00000e6400000e6400000fa600000fa600000fa600000fa600000fa60000
0fa600000fa600000fa600000fa600000fa600000fa600000fa600000fa6
00000fa600000fa600000fa600000fa600000fa600000fa600000fa60000
0fa600000fa600000fa600000fa600000fa600000fa600000fa600000fa6
00000fa600000fa600000fa600000fa600000fa600000fa600000fa60000
0fa600000fa600000fa600000fa600000fa600000fa600000fa600000fa6
00000fa600000fa600000fa600000fa600000fa600000fa600000fa60000
118000001180000011800000118000001180000011800000118000001180
000011800000118000001180000011800000118000001272000012720000
127200001272000012720000127200001272000012720000127200001272
000012720000127200001272000012720000127200001272000012720000
1272000012f8000012f8000012f8000012f8000012f8000012f8000012f8
0000141a0000141a0000141a0000141a0000141a0000141a0000141a0000
153600001536000015360000153600001536000015360000153600001536
000015360000153600001536000015360000166400001664000016640000
1756000017560000175600001756000018e2000018e2000018e2000018e2
000018e2000018e2000018e2000018e2000018e2000018e2000019da0000
19da000019da000019da000019da000019da000019da000019da000019da
000019da000019da000019da000019da000019da000019da000019da0000
19da000019da000019da000019da000019da000019da000019da000019da
000019da000019da000019da00001afa00001afa00001afa00001afa0000
1afa00001afa00001afa00001afa00001afa00001afa00001afa00001afa
00001afa00001afa00001afa00001afa00001afa00001afa00001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001bc400001bc4
00001bc400001bc400001bc400001bc400001bc400001bc400001bc40000
1bc400001bc400001bc400001bc400001bc400001bc400001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a0000
1c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a00001c0a
00001c0a00001d7800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb800001eb800001eb80000
1eb800001eb800001eb800001eb800001eb800001eb800001eb800001eb8
00001eb800001eb800001eb800001eb800001eb8000100000f2201200010
00c3000700020010002f0065000011900182000400010000000e00ae0000
00030000000000640000000000030000000700fa00640001000000000000
0032015e0001000000000003000e01900001000000000004000e019e0001
000000000006000e01ac0001000000000007007d01ba0003000104090000
006402370003000104090001001c029b0003000104090002000e02b70003
000104090003001c02c50003000104090004001c02e10003000104090006
001c02fd000300010409000700fa031900a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006500690074006800650072
002000610020007200650067006900730074006500720065006400200074
0072006100640065006d00610072006b0020006f00720020006100200074
0072006100640065006d00610072006b0020006f00660020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e00200069006e002000740068006500200055006e00690074
00650064002000530074006100740065007300200061006e0064002f006f
00720020006f007400680065007200200063006f0075006e007400720069
00650073002ea92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e45504841
4c442b43616c69627269455048414c442b43616c69627269455048414c44
2b43616c6962726943616c69627269206973206569746865722061207265
67697374657265642074726164656d61726b206f7220612074726164656d
61726b206f66204d6963726f736f667420436f72706f726174696f6e2069
6e2074686520556e697465642053746174657320616e642f6f72206f7468
657220636f756e74726965732e00a9002000320030003000380020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e00450050004800
41004c0044002b00430061006c0069006200720069005200650067007500
6c006100720045005000480041004c0044002b00430061006c0069006200
7200690045005000480041004c0044002b00430061006c00690062007200
690045005000480041004c0044002b00430061006c006900620072006900
430061006c00690062007200690020006900730020006500690074006800
650072002000610020007200650067006900730074006500720065006400
2000740072006100640065006d00610072006b0020006f00720020006100
2000740072006100640065006d00610072006b0020006f00660020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e00200069006e002000740068006500200055006e00
69007400650064002000530074006100740065007300200061006e006400
2f006f00720020006f007400680065007200200063006f0075006e007400
72006900650073002e000000b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0404d162326460f15010f151f1502451f15010011e011f01103
15bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e
03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c
5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046000301200101
0001100120010308b8ffc0b301151f46b80100b316010501b80190b15453
2b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d0042
1d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db11600
42592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73
742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e7375
5e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb10002435458
41ff0284006402830064028200640281006402800064027f0064027e0064
027d0064027c0064027b0064027a00640279006402780064027700640276
00640275006402740064027300640271006402700064026f0064026e0064
026d0064026c0064026b0064026a00640269006402680064026700640266
0064026500640264006402630064026200640261006402600064025f0064
025e0064025d0064025c0064025b0064025a006402590064025800640257
006402560064025500640254006402530064025200640251006402500064
024f0064024e0064024d0064024c0064024b0064024a0064024900640248
006402470064024600640245006402440064024300640242006402410064
02400064023f0064023e0064023d0064023c0064023b0064023a00640239
006402380064023700640236006402350064023400640233006402320064
0231006402300064022f0064022e0064022d0064022c0064022b0064022a
006402290064022800640227006402260064022500640224006402230064
022200640221006402200064021f0064021e0064021d0064021c0064021b
0064021a0064021900640218006402170064021600640215006402140064
02130064021200640211006402100064020f0064020e0064020d0064020c
0064020b0064020a00640209006402080064020700640206006402050064
020441ff00640203006402020064020100640200006401ff006401fe0064
01fd006401fc006401fb006401fa006401f9006401f8006401f7006401f6
006401f5006401f4006401f3006401f2006401f1006401f0006401ef0064
01ee006401ed006401ec006401eb006401ea006401e9006401e8006401e7
006401e6006401e5006401e4006401e3006401e2006401e1006401e00064
01df006401de006401dd006401dc006401db006401da006401d9006401d8
006401d7006401d6006401d5006401d4006401d3006401d2006401d10064
01d0006401cf006401ce006401cd006401cc006401cb006401ca006401c9
006401c8006401c7006401c6006401c5006401c4006401c3006401c20064
01c1006401c0006401bf006401be006401bd006401bc006401bb006401ba
006401b9006401b8006401b7006401b6006401b5006401b4006401b30064
01b2006401b1006401b0006401af006401ae006401ad006401ac006401ab
006401aa006401a9006401a8006401a7006401a6006401a5006401a40064
01a3006401a2006401a1006401a00064019f0064019e0064019d0064019c
0064019b0064019a00640199006401980064019700640196006401950064
0194006401930064019200640191006401900064018f0064018e0064018d
0064018c0064018b0064018a006401890064018800640187006401860064
0185006441800184006401830064018200640181006401800064017f0064
017e0064017d0064017c0064017b0064017a006401790064017800640177
006401760064017500640174006401730064017200640171006401700064
016f0064016e0064016d0064016c0064016b0064016a0064016900640168
006401670064016600640165006401640064016300640162006401610064
01600064015f0064015e0064015d0064015c0064015b0064015a00640159
006401580064015700640156006401550064015400640153006401520064
01500064014f0064014e0064014c0064014b0064014a0064014900640148
006401470064014600640145006401440064014300642b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e00>
[7865 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 856 24 <000200ac0000048f050e0012001f0077401d3f2101131810014d13100f01
4d13140d014d13120c014d13180b014d13bb02320000001affe8b310014d
1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8ffe8b30b
014d1abb021100090018010cb20e511bb80126b10554003fed3fed012fe1
2b2b2b2b2bd4e12b2b2b2b2b31305d01140e022321222635113436332132
1e0207342e0223231133323e02048f56a5f0a6feee172929170125a8e89d
51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e89969b5
844afc113e80c100>PBAAAA+Calibri AddT42Char 
2 1284 62 <000100ac0000034b0514001a0048b90015ffe8b310014d15b8fff0b30f01
4d15b8fff0b30d014d15b8fff6b30c014d15b8ffe8b30b014d15b80211b4
00090f5215b8012bb10654003fed3f012fcde12b2b2b2b2b313025140e02
232122263511343e0233321e02151121321e02034b04090d09fdc4172908
1422181921140801d0090d09044b141b13091f2704ae080c070505070c08
fba109111c00>PBAAAA+Calibri AddT42Char 
2 2726 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>PBAAAA+Calibri AddT42Char 
2 3076 271 <00020099ffed03d50571002a003d0085b53f3f010a2136b8fff6b30c014d
36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36b801f840
1b152b120c014d2b200d014d2b180b014d2b1810014d2b100f014d2bb802
0a400900150a363521040530b80105b6264a1b46104c39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b323931305d01
140e0223222e022715140e0223222e023511343e0233321e0215113e0333
321e0207342e0223220e020711161633323e0203d53363905d2b49464627
08121b15141c12060713201819201208284b484828628b5728ae15345640
203e404527447c433e58371901e775bb844611263a296e080c070404070c
080538080c080404080c08fde5293823104e83b0754582643d122a4232fe
9953573c637b>PBAAAA+Calibri AddT42Char 
2 3382 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>PBAAAA+Calibri AddT42Char 
2 3684 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>PBAAAA+Calibri AddT42Char 
2 4722 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>PBAAAA+Calibri AddT42Char 
2 6370 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/D 24 def
/L 62 def
/a 258 def
/b 271 def
/d 282 def
/e 286 def
/l 367 def
/t 410 def
end
PBAAAA+Calibri /Encoding get
dup 68 /D put
dup 76 /L put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/QGKCBU+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/QGKCBU+Calibri*1 
[68{/.notdef}rp /D 7{/.notdef}rp /L 20{/.notdef}rp /a /b /.notdef 
/d /e 6{/.notdef}rp /l 7{/.notdef}rp /t 139{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
31.1721 608.658 mo
(Labeled)
[-5.04773 -5.75702 -6.30994 -5.98541 -2.75171 -5.98541 0 ]ysh
45.6217 601.049 mo
(Data)
[-7.40515 -5.68616 -4.03925 0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6*"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6*"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6*"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 2448 104 <000100aaffed04790514002b0099401d602d01201810014d20100f014d20
100d014d200a0c014d20180b014d20b802104011004015014d004013014d
004011014d0016b8ffe8b310014d16b8fff0b30f014d16b8fff0b30d014d
16b8fff6b30c014d16b8ffe8b30b014d16ba0210000affc0b315014d0ab8
ffc0400913014d0a265210521bb80129b10556003fed3f3f012f2b2be12b
2b2b2b2bd42b2b2be12b2b2b2b2b31305d01140e0223222e023511343e02
33321e021511141e0233323e023511343e0233321e021504794580b8756b
b07e440814201a182213082c5375494b75512b081421191821130901de76
b980423e79b6770323080c070505070c08fcf25a86592d2c588257031708
0c070505070c0800>PBAAAA+Calibri AddT42Char 
2 4856 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/U 104 def
/n 374 def
end
PBAAAA+Calibri /Encoding get
dup 85 /U put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[68{/.notdef}rp /D 7{/.notdef}rp /L 8{/.notdef}rp /U 11{/.notdef}rp /a 
/b /.notdef /d /e 6{/.notdef}rp /l /.notdef /n 
5{/.notdef}rp /t 139{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
84.3727 614.477 mo
(Unlabeled)
[-7.70441 -6.29791 -2.73969 -5.74506 -6.29785 -5.97339 -2.73975 -5.97339 0 ]ysh
98.7622 601.049 mo
(Data)
[-7.40515 -5.68616 -4.03925 0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB-#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB-#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB-#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1.00071 lw
34.8168 561.212 mo
34.8168 553.411 li
87.9536 553.411 li
87.9536 561.212 li
0 0 0 .863462 cmyk
@
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E63%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E63%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E63%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
61.7369 501.361 mo
61.7369 553.411 li
@
61.7369 496.054 mo
65.2538 503.087 li
65.2538 503.023 li
63.0797 501.936 60.4581 501.936 58.2201 503.023 cv
58.2201 503.087 li
61.7369 496.054 li
ef
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB?)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB?)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB?)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
65.2538 300.388 mo
65.2538 303.073 li
65.062 303.073 li
65.062 369.83 li
@
65.2538 300.388 mo
68.7707 307.421 li
68.8346 307.421 li
66.5966 306.27 63.9749 306.27 61.8009 307.421 cv
61.7369 307.421 li
65.2538 300.388 li
ef
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6W1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6W1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6W1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if

2 0 3 <> PBAAAA+Calibri AddT42Char 
2 2028 94 <00010047ffed03630521004900e7b90041ffe8b40f10014c41b8fff0b30d
014d41b8fff0b310014d41b8fff0b30c014d41b8ffe8b30b014d41b8022c
402b32401314014c324011014d243224320c1b180f10014c1b100d014d1b
1010014d1b100c014d1b180b014d1bba02310000ffc0b31b014d00b8ffc0
b319014d00b8ffc0b314014d00b8ffc0b60f11014c000c2ebb0127003700
0a0126400b1120370137400b0c014c11b8ffc0400a0b0c014c3711371116
3cb8010cb5411b05295316b80129b10556003fed3f123939ed1139392f2f
2b2b5d10ed10ed012fd42b2b2b2be12b2b2b2b2b1239392f2f2b2be12b2b
2b2b2b313001140e0223222e0435343e0233321e0233323e0235342e0635
343e0233321e0615140e0223222e0223220e0215141e0603634377a15d41
6f573b170b04080c080e3350714a385d43243252696e6852333b6991542b
574d3c1306040203060b070b2f445d3a3650341a32536a6e6a5333016b5b
8e633216202218251f161d12072228231e375033374e3b31333e54714f51
7f562d0f191f130b111813121c13091c231d1d304225364e3c32333d5371
>PBAAAA+Calibri AddT42Char 
2 4480 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>PBAAAA+Calibri AddT42Char 
2 5430 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>PBAAAA+Calibri AddT42Char 
2 6906 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/space 3 def
/S 94 def
/i 349 def
/p 393 def
/y 455 def
end
PBAAAA+Calibri /Encoding get
dup 32 /space put
dup 83 /S put
dup 105 /i put
dup 112 /p put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 7{/.notdef}rp /L 6{/.notdef}rp /S 
/.notdef /U 11{/.notdef}rp /a /b /.notdef /d /e 
3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /.notdef /p 
3{/.notdef}rp /t 4{/.notdef}rp /y 134{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
76.9554 351.926 mo
(Split by )
[-5.51175 -6.30511 -2.74692 -2.74692 -4.02121 -2.68433 -6.30508 -5.43967 0 ]ysh
91.3449 365.871 mo
(Labeled Data)
[-5.0369 -5.74625 -6.29907 -5.97461 -2.74091 -5.97461 -6.29907 -2.68433 -7.38116 -5.74622 -4.0152 0 
]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiC2A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiC2A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiC2A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
65.9572 125.696 mo
65.9572 178.129 li
0 0 0 .863462 cmyk
@
65.9572 120.324 mo
69.474 127.421 li
69.538 127.357 li
67.3 126.27 64.6783 126.27 62.5042 127.357 cv
62.4403 127.421 li
65.9572 120.324 li
ef
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!lDdia~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!lDdia~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!lDdia~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1 /1 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 1440 68 <000100acfffa062b050e003c00ac4010603e703e020d3030172f2f0a2e18
181ab8ffe8b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b3
0c014d1ab8ffe8b30b014d1ab80211401e24310c0c0a1810014d0a100f01
4d0a100d014d0a0a0c014d0a180b014d0aba02110000ffc040190b014d00
2436510b18170d2f18312e061f28511f5512550555003f3f3f3f12173911
333f012fd42be12b2b2b2b2b32113310e12b2b2b2b2b32113311393d2f33
33113331305d25140e0223222e02351123010e0323222e0227012311140e
0223222e02351134363333321e02170133013e033333321e0215062b0814
1f191721130802fe33030b151d14151e140b02fe47010814201918201307
2c1b68203024180901770501860b1a1f26196d0f1b130c1a080c07050507
0c080467fb94070a070304070a06046cfb99080c070505070c0804a62a24
0c1a281bfc5703a61e2a190b09131d15>PBAAAA+Calibri AddT42Char 
2 4006 336 <00030035fe93038903c8003e004e005f00d04015122d47100f014d47080c
014d47201013014c47333fb8fff8b30c014d3fb8fff0b30f014d3fb8ffe0
b61013014c3f074fb8ffe0400d0f12014c4f1b040f3003330707b8ffe0b3
10014d1bb8ffc0400d10014d2d33071b1b07332d0400b8ffe040340b014d
0058100f014d58201012014c582a25400b12014c250f300703384ada0c53
e81515603803e93c482a2042d9384a5bd9204f003fed3fed12393fed1112
392fedd6ed121739012f2b33cd2b2bc42b17392f2f2f2f2b2b1112173910
cd2b10cd2b2b2b10cd2b2b2b10cd31300114062323161615140e02232226
27060615141617171e0315140e0223222e0235343e023726263534363726
2635343e023332161721321601342623220e0215141633323e0213342627
270e0315141633323e020389130f81231c325d804e37631b12174136eb43
70522e346ba6716d99622c10213120312f32251f24345c814c29471f0110
1111fefe655d30472f17655b31482f17535f51e92029180984764b653e1b
0374231f24572f4e78532c1d16122e1e232e020a02213d593b3e70553125
405934213e383319194c2c3d6026255d424d7a542d090821fef15c672038
492859661f3748fd5e3a3f0208192d29281541431d303e00>PBAAAA+Calibri AddT42Char 
2 5732 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/M 68 def
/g 336 def
/r 396 def
end
PBAAAA+Calibri /Encoding get
dup 77 /M put
dup 103 /g put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[32{/.notdef}rp /space 35{/.notdef}rp /D 7{/.notdef}rp /L /M 5{/.notdef}rp 
/S /.notdef /U 11{/.notdef}rp /a /b /.notdef /d 
/e /.notdef /g /.notdef /i 2{/.notdef}rp /l /.notdef 
/n /.notdef /p /.notdef /r /.notdef /t 4{/.notdef}rp 
/y 134{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
78.1064 164.701 mo
(Merge)
[-10.2385 -6.01907 -4.15573 -5.62231 0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!eQ&WL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!eQ&WL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!eQ&WL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 606 18 <00010061fff0040c051e00390062b31c003b2bb8ffe8b310014d2bb8fff0
b30f014d2bb8ffecb30d014d2bb8ffeeb30c014d2bb8ffe8b30b014d2bbe
0233000e0018012f00210026012cb2135304bb012a00350030012eb10956
003ffdd4ed3ffdd4ed012fe12b2b2b2b2b10d6c4313025140e0623222e02
35343e0233321e0615140e0223222e0223220e0215141e0233323e023332
1e02040c02050814405f7b497ecb8f4d5396d17f386a5a461b0805030408
0b080e324f714f568d64373563905b4d7351340f070a0603b71018120e14
29271b54a4f19da1fcaf5c15202a1b0e131a12141c1309272f274586c17c
7bbd7f41262f2606111e>PBAAAA+Calibri AddT42Char 
2 1074 38 <000100acfffa0354050e0027005cb10713b8ffe8b310014d13b8fff0b30f
014d13b8fff0b30d014d13b8fff6b30c014d13b8ffe8b30b014d13b80211
b50d1d001e1d07b8010cb313131906b80128b322511955003f3fed12392f
ed012f2fc41139e12b2b2b2b2b32313001140e0223211121321e0215140e
02232111140e0223222e02351134363321321e020354040a0d07fe2601c0
070d0a04040a0d07fe400814201a1822140829170246070d0a0404c4131c
1108fe4807101b15131b1109fde5070d070505070d0704ae271f08121d00
>PBAAAA+Calibri AddT42Char 
2 5974 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>PBAAAA+Calibri AddT42Char 
2 6618 437 <00010094ffed039c03bc00320092401f3f34010b27100d014d270a0c014d
27080b014d27100f10014c27100b014d27b801f9b6004011014d001fb8ff
f0b30d014d1fb8fff6b30c014d1fb8fff8b40f10014c1fb8fff8b30b014d
1fb8fff0b40f10014c1fb8fff0b30b014d1fb801f94009132d49270b0519
4924b80105b30e4d054c003f3fed3f1239393f012fe12b2b2b2b2b2bd42b
e12b2b2b2b2b3931305d25140e0223222e023535060623222e023511343e
0233321e021511141e023332363711343e0233321e0215039c07121d1517
1d11064d964d5a7b4c210714201818201308172f48303e7b4507141f1918
20120919080b080404080b0877554e3c6789620222080b090303090b08fd
f44f5f432558550275080b090303090b0800>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/C 18 def
/F 38 def
/s 400 def
/u 437 def
end
PBAAAA+Calibri /Encoding get
dup 67 /C put
dup 70 /F put
dup 115 /s put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[32{/.notdef}rp /space 34{/.notdef}rp /C /D /.notdef /F 5{/.notdef}rp 
/L /M 5{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a 
/b /.notdef /d /e /.notdef /g /.notdef /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
139.748 87.9689 mo
(Final Clusters)
[-5.5238 -2.75891 -6.25702 -5.75226 -2.75891 -2.74927 -6.41339 -2.75897 -6.31708 -4.67035 -4.03326 -5.95654 
-4.20148 0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiK-"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiK-"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiK-"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 322 4 <00020023fffa047e051400220026009db90024ffe8b40c10014c23b8ffe8
b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8fff0401a0b
10014c25100b10014c0d100b10014c0c100b10014c40280125b8fff0402c
0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02af23bf23
cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d1117391112
3939113310ed3211333130012b5d2b2b2b2b2b2b002b2b25161606062322
2e02270321030e03232226263637013e0333321e02170723032104750801
10251f1f251309046ffde66a030a13231c1d250f010801b2040d19271e20
2a1a0e047b01df01c23d161b0e0403070c09013bfec9090d0904050e1b16
04b20b0e080303080f0b8dfd7b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/A 4 def
end
PBAAAA+Calibri /Encoding get
dup 65 /A put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /.notdef /C /D /.notdef 
/F 5{/.notdef}rp /L /M 5{/.notdef}rp /S /.notdef /U 
11{/.notdef}rp /a /b /.notdef /d /e /.notdef /g 
/.notdef /i 2{/.notdef}rp /l /.notdef /n /.notdef /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
72.991 541.262 mo
(Split by)
[-5.51422 -6.3075 -2.74927 -2.74933 -4.02362 -2.68433 -6.3075 0 ]ysh
87.4406 542.416 mo
(All Data)
[-6.953 -2.74573 -2.74573 -2.74805 -7.38593 -5.75104 -4.01999 0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.459 li
-170.569 652.459 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<EH3#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.459 li
-166.476 652.459 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<EH3#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.459 li
-162.384 652.459 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.296 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<EH3#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
73.5664 461.077 mo
73.1188 461.077 li
72.6073 461.013 li
67.6154 459.745 67.6943 453.035 72.5433 451.869 cv
72.9909 451.805 li
73.5025 451.741 li
78.7884 451.828 80.014 459.082 74.9731 460.821 cv
74.5255 460.949 li
74.0779 461.013 li
cp
73.8222 459.478 mo
74.1419 459.478 li
74.3977 459.414 li
77.6577 458.414 77.2101 453.707 73.8861 453.34 cv
73.5664 453.276 li
73.2467 453.34 li
69.685 453.672 69.4858 458.6 72.863 459.478 cv
73.1827 459.478 li
73.5025 459.542 li
0 0 0 1 cmyk
f
85.4598 465.233 mo
85.0122 465.169 li
84.5007 465.105 li
79.5888 464.151 79.5568 457.063 84.4367 456.025 cv
84.8843 455.897 li
85.3959 455.897 li
90.6723 455.904 91.9 463.289 86.8666 464.977 cv
86.419 465.105 li
85.9714 465.169 li
cp
85.7156 463.634 mo
86.0353 463.634 li
86.2911 463.571 li
89.5234 462.45 89.1792 458.039 85.7795 457.432 cv
85.1401 457.432 li
81.6179 457.908 81.311 462.724 84.7564 463.571 cv
85.3959 463.698 li
f
27.0158 437.737 mo
26.5682 437.737 li
26.1206 437.674 li
21.1597 436.581 21.0403 429.73 25.9927 428.53 cv
26.5042 428.466 li
26.9518 428.402 li
32.3284 428.672 33.4293 435.605 28.4225 437.546 cv
27.9749 437.674 li
27.5273 437.737 li
cp
27.2716 436.203 mo
27.911 436.075 li
31.1199 434.947 30.6819 430.474 27.3355 430 cv
26.6961 430 li
23.1803 430.454 22.8648 435.168 26.3124 436.139 cv
26.6321 436.203 li
26.9518 436.203 li
f
77.7227 445.539 mo
77.2112 445.475 li
76.7636 445.411 li
71.8005 444.454 71.8197 437.376 76.6996 436.331 cv
77.1472 436.203 li
77.6588 436.203 li
82.9724 436.299 84.1639 443.6 79.0655 445.283 cv
78.6179 445.411 li
78.1703 445.475 li
cp
77.9146 443.94 mo
78.2343 443.94 li
78.554 443.812 li
81.7714 442.941 81.3717 438.119 78.0424 437.801 cv
77.7227 437.737 li
77.403 437.737 li
73.8659 438.197 73.5526 443.059 77.0193 443.876 cv
77.6588 444.004 li
f
85.9714 452.764 mo
85.5238 452.764 li
85.0122 452.7 li
80.0972 451.545 80.0321 444.742 84.9483 443.556 cv
85.4598 443.492 li
85.9074 443.428 li
91.3053 443.688 92.3678 450.647 87.3781 452.572 cv
86.9305 452.7 li
86.4829 452.764 li
cp
86.2272 451.229 mo
86.8666 451.102 li
90.0947 449.925 89.6098 445.515 86.2911 445.027 cv
85.6517 445.027 li
82.1188 445.471 81.83 450.204 85.268 451.166 cv
85.5877 451.229 li
85.9074 451.229 li
f
38.9092 406.661 mo
38.4616 406.661 li
38.014 406.597 li
33.0712 405.457 32.9231 398.66 37.8861 397.453 cv
38.3977 397.389 li
38.8453 397.325 li
44.1494 397.4 45.3441 404.682 40.316 406.405 cv
39.8684 406.533 li
39.4208 406.597 li
cp
39.165 405.063 mo
39.4847 405.063 li
39.8044 404.999 li
42.9931 403.945 42.5572 399.279 39.2289 398.924 cv
38.9092 398.86 li
38.5895 398.924 li
38.2698 398.924 li
37.1678 399.109 35.9796 400.269 35.84 401.354 cv
35.776 401.61 li
35.776 401.929 li
35.7089 403.15 36.7085 404.719 37.9501 404.935 cv
38.2059 405.063 li
38.5256 405.063 li
38.8453 405.126 li
f
34.8169 449.695 mo
34.3053 449.631 li
33.8577 449.567 li
28.9224 448.459 28.7955 441.726 33.7938 440.423 cv
34.2414 440.359 li
34.689 440.359 li
40.106 440.372 41.1579 447.837 36.1597 449.439 cv
35.7121 449.567 li
35.2645 449.631 li
cp
35.0087 448.096 mo
35.6481 447.968 li
38.8197 446.952 38.4414 442.418 35.1366 441.894 cv
34.4971 441.894 li
30.8641 442.383 30.6797 447.286 34.1135 448.032 cv
34.3692 448.096 li
34.689 448.096 li
f
50.2911 395.279 mo
49.8435 395.215 li
49.332 395.151 li
44.1653 393.968 44.4723 386.771 49.7156 385.944 cv
50.2911 385.944 li
55.836 386.092 56.6513 393.816 51.2502 395.151 cv
50.8026 395.215 li
50.2911 395.279 li
cp
50.2272 393.681 mo
50.8666 393.681 li
51.1224 393.553 li
52.3298 393.296 53.2208 392.136 53.3604 390.931 cv
53.3604 390.292 li
53.2666 388.984 52.1849 387.833 50.9305 387.542 cv
50.6108 387.478 li
49.9714 387.478 li
46.2925 388.073 46.2808 392.788 49.5877 393.617 cv
49.9074 393.681 li
50.2911 393.681 li
f
27.0158 406.661 mo
26.5682 406.661 li
26.1206 406.597 li
21.1778 405.457 21.0296 398.66 25.9927 397.453 cv
26.5043 397.389 li
26.9519 397.325 li
32.256 397.4 33.4506 404.682 28.4225 406.405 cv
27.9749 406.533 li
27.5273 406.597 li
cp
27.2716 405.063 mo
27.5913 405.063 li
27.911 404.999 li
31.0996 403.945 30.6638 399.279 27.3355 398.924 cv
27.0158 398.86 li
26.6961 398.924 li
26.3764 398.924 li
25.2744 399.109 24.0872 400.269 23.9465 401.354 cv
23.8826 401.61 li
23.8826 401.929 li
23.8154 403.15 24.8151 404.719 26.0567 404.935 cv
26.3124 405.063 li
26.6321 405.063 li
26.9519 405.126 li
f
46.7103 445.539 mo
46.1987 445.475 li
45.7511 445.411 li
40.7838 444.44 40.7561 437.376 45.6872 436.331 cv
46.1348 436.203 li
46.5824 436.203 li
51.9249 436.188 53.1089 443.651 48.0531 445.283 cv
47.6055 445.411 li
47.1579 445.475 li
cp
46.9021 443.94 mo
47.2218 443.94 li
47.5415 443.812 li
50.6289 442.971 50.4126 438.183 47.03 437.801 cv
46.7103 437.737 li
46.3906 437.737 li
42.7916 438.226 42.5391 443.12 46.0069 443.876 cv
46.2627 443.94 li
46.5824 444.004 li
f
96.8418 430 mo
96.3941 429.936 li
95.8826 429.872 li
90.9504 428.804 90.9291 421.979 95.8187 420.729 cv
96.2663 420.665 li
96.7778 420.665 li
102.09 420.716 103.274 428.004 98.2485 429.745 cv
97.8009 429.872 li
97.2894 429.936 li
cp
97.0975 428.402 mo
97.4172 428.402 li
97.673 428.274 li
100.905 427.319 100.542 422.76 97.1615 422.199 cv
96.522 422.199 li
92.9753 422.701 92.6855 427.474 96.1384 428.338 cv
96.4581 428.402 li
96.7778 428.402 li
f
54.4474 406.661 mo
53.9359 406.661 li
53.4883 406.597 li
48.4048 405.346 48.6414 398.521 53.4243 397.453 cv
53.8719 397.389 li
54.3835 397.325 li
59.6822 397.464 60.9057 404.727 55.7902 406.405 cv
55.4066 406.533 li
54.895 406.597 li
cp
54.7032 405.063 mo
55.0229 405.063 li
55.2787 404.999 li
58.5014 403.964 58.1018 399.324 54.7671 398.924 cv
54.4474 398.86 li
54.1277 398.924 li
50.5789 399.209 50.3231 404.238 53.744 405.063 cv
54.0638 405.063 li
54.3835 405.126 li
f
62.1846 398.86 mo
61.737 398.86 li
61.2254 398.796 li
56.3082 397.596 56.2336 390.927 61.1615 389.652 cv
61.673 389.588 li
62.1206 389.588 li
67.4044 389.634 68.6631 396.787 63.5913 398.668 cv
63.1437 398.796 li
62.6961 398.86 li
cp
62.4403 397.325 mo
63.0798 397.198 li
66.2545 396.098 65.8762 391.617 62.5043 391.123 cv
61.8649 391.123 li
58.3213 391.599 58.0592 396.336 61.4812 397.261 cv
61.8009 397.325 li
62.1206 397.325 li
f
104.579 441.894 mo
104.131 441.894 li
103.684 441.83 li
98.7718 440.698 98.5746 433.922 103.556 432.686 cv
104.067 432.622 li
104.515 432.558 li
109.91 432.721 110.968 439.81 105.986 441.702 cv
105.538 441.766 li
105.09 441.894 li
cp
104.835 440.359 mo
105.474 440.231 li
108.689 439.092 108.244 434.621 104.899 434.157 cv
104.579 434.093 li
104.259 434.157 li
103.939 434.157 li
102.723 434.398 101.802 435.42 101.51 436.586 cv
101.51 436.906 li
101.446 437.226 li
101.408 438.426 102.397 439.956 103.62 440.167 cv
103.875 440.295 li
104.195 440.295 li
104.515 440.359 li
f
38.9093 434.093 mo
38.4616 434.093 li
38.014 434.029 li
33.0275 432.928 32.9487 426.155 37.8862 424.885 cv
38.3977 424.821 li
38.8453 424.821 li
44.1782 424.85 45.3142 432.157 40.316 433.901 cv
39.8684 434.029 li
39.4208 434.093 li
cp
39.165 432.558 mo
39.8045 432.43 li
43.0165 431.321 42.57 426.863 39.229 426.356 cv
38.5895 426.356 li
35.0705 426.815 34.7668 431.618 38.2059 432.494 cv
38.5256 432.558 li
38.8453 432.558 li
f
96.8418 457.432 mo
96.3941 457.432 li
95.8826 457.368 li
90.9633 456.249 90.9142 449.376 95.8187 448.224 cv
96.2663 448.16 li
96.7778 448.096 li
102.117 448.326 103.276 455.301 98.2485 457.24 cv
97.8009 457.368 li
97.2894 457.432 li
cp
97.0975 455.897 mo
97.4172 455.833 li
97.673 455.769 li
100.942 454.715 100.505 450.196 97.1615 449.695 cv
96.522 449.695 li
92.9924 450.055 92.6993 454.958 96.1384 455.833 cv
96.4581 455.897 li
96.7778 455.897 li
f
65.8293 480.771 mo
65.3178 480.771 li
64.8702 480.707 li
59.8645 479.514 59.9465 472.675 64.8062 471.563 cv
65.2538 471.499 li
65.7654 471.436 li
71.1164 471.616 72.2471 478.82 67.1721 480.515 cv
66.7245 480.643 li
66.2769 480.707 li
cp
66.0211 479.173 mo
66.3409 479.173 li
66.6606 479.109 li
69.8801 478.083 69.4858 473.412 66.149 473.034 cv
65.8293 472.97 li
65.5096 473.034 li
61.9586 473.359 61.689 478.285 65.1259 479.173 cv
65.4457 479.173 li
65.7654 479.237 li
f
54.4474 476.615 mo
53.9359 476.615 li
53.4883 476.551 li
48.5497 475.47 48.5103 468.515 53.4243 467.407 cv
53.8719 467.343 li
54.3835 467.279 li
59.744 467.518 60.8641 474.568 55.7902 476.423 cv
55.4066 476.487 li
54.895 476.615 li
cp
54.7032 475.08 mo
55.0229 475.016 li
55.2787 474.952 li
58.4929 473.917 58.1273 469.344 54.7671 468.878 cv
54.4474 468.814 li
54.1277 468.878 li
50.5959 469.167 50.3188 474.197 53.744 475.016 cv
54.0638 475.016 li
54.3835 475.08 li
f
108.735 430 mo
108.288 429.936 li
107.776 429.872 li
102.844 428.804 102.823 421.979 107.712 420.729 cv
108.16 420.665 li
108.671 420.665 li
113.984 420.716 115.168 428.004 110.142 429.745 cv
109.694 429.872 li
109.183 429.936 li
cp
108.991 428.402 mo
109.311 428.402 li
109.566 428.274 li
112.799 427.319 112.435 422.76 109.055 422.199 cv
108.415 422.199 li
104.869 422.702 104.579 427.474 108.032 428.338 cv
108.352 428.402 li
108.671 428.402 li
f
60.7778 484.352 mo
60.0744 484.416 li
59.3711 484.352 li
59.1792 484.352 li
59.3071 482.817 li
60.7778 482.817 li
cp
57.5807 484.224 mo
57.261 484.224 li
56.046 483.968 li
56.3018 482.434 li
57.3888 482.626 li
57.7725 482.689 li
cp
54.3835 483.585 mo
53.2965 483.201 li
52.9128 483.009 li
53.4883 481.602 li
53.808 481.73 li
54.8951 482.114 li
cp
51.4421 482.37 mo
50.9945 482.114 li
50.0354 481.539 li
50.8666 480.196 li
51.7618 480.771 li
52.1455 480.963 li
cp
48.7565 480.451 mo
48.5647 480.324 li
47.7974 479.556 li
47.6055 479.237 li
48.7565 478.277 li
48.9483 478.469 li
49.2681 478.853 li
49.6517 479.173 li
49.7796 479.301 li
cp
46.6464 477.894 mo
46.5185 477.702 li
46.3267 477.19 li
46.0709 476.743 li
45.943 476.295 li
47.4137 475.848 li
47.5416 476.103 li
47.6695 476.551 li
47.8613 476.935 li
47.9892 477.126 li
cp
45.6233 474.633 mo
45.6233 474.057 li
47.1579 473.993 li
47.1579 474.441 li
cp
45.6233 473.993 mo
45.6233 473.546 li
45.6872 472.97 li
45.6872 472.842 li
47.2219 473.098 li
47.2219 473.162 li
47.1579 473.546 li
47.1579 474.057 li
cp
46.1348 471.18 mo
46.2627 470.86 li
46.5185 470.412 li
46.7743 469.901 li
46.9022 469.709 li
48.2449 470.54 li
48.1171 470.668 li
47.9252 471.052 li
47.7334 471.499 li
47.6055 471.755 li
cp
47.9892 468.366 mo
48.181 468.174 li
48.5647 467.727 li
49.0123 467.343 li
49.2041 467.215 li
50.1633 468.43 li
50.0354 468.494 li
49.6517 468.878 li
49.2681 469.198 li
49.0762 469.389 li
cp
50.483 466.256 mo
50.9306 466 li
51.8897 465.489 li
52.657 466.832 li
51.7618 467.279 li
51.3142 467.599 li
cp
53.4244 464.785 mo
54.5114 464.466 li
54.959 464.338 li
55.3427 465.872 li
55.0229 465.936 li
53.9359 466.32 li
cp
56.5576 464.018 mo
57.197 463.89 li
58.1562 463.762 li
58.284 465.297 li
57.4528 465.425 li
56.8134 465.489 li
cp
59.7547 463.698 mo
60.0744 463.698 li
60.0744 465.233 li
59.8187 465.233 li
cp
60.0744 463.698 mo
61.3533 463.698 li
61.2894 465.233 li
60.0744 465.233 li
cp
63.0158 463.89 mo
64.2947 464.082 li
64.6144 464.21 li
64.2307 465.681 li
64.0389 465.617 li
62.76 465.425 li
cp
66.149 464.594 mo
66.8524 464.849 li
67.6198 465.169 li
67.0443 466.64 li
66.4048 466.32 li
65.6375 466.064 li
cp
69.0904 465.936 mo
69.1544 465.936 li
70.1775 466.576 li
70.4972 466.832 li
69.538 468.047 li
69.3462 467.919 li
68.451 467.343 li
68.3871 467.279 li
cp
71.776 467.855 mo
71.9679 468.11 li
72.3515 468.558 li
72.7352 468.942 li
72.8631 469.134 li
71.6482 470.093 li
71.5203 469.965 li
71.2645 469.581 li
70.689 469.006 li
cp
73.7583 470.604 mo
73.8862 470.86 li
74.2698 471.883 li
74.3338 472.203 li
72.8631 472.586 li
72.7991 472.331 li
72.6712 471.947 li
72.4794 471.499 li
72.3515 471.244 li
cp
74.5895 473.865 mo
74.5895 473.993 li
72.991 474.057 li
72.991 473.929 li
cp
74.5895 474.057 mo
74.3977 475.592 li
72.8631 475.336 li
72.927 474.952 li
72.991 474.505 li
72.991 473.993 li
cp
73.8222 477.254 mo
73.3746 478.15 li
73.1188 478.597 li
72.991 478.725 li
71.776 477.83 li
71.776 477.766 li
72.2876 476.999 li
72.4794 476.615 li
cp
71.9039 480.004 mo
71.2006 480.707 li
70.689 481.091 li
69.7299 479.876 li
70.1775 479.556 li
70.8169 478.917 li
cp
69.3462 481.986 mo
69.2183 482.114 li
68.1313 482.689 li
67.8755 482.753 li
67.2361 481.347 li
68.515 480.707 li
cp
66.3409 483.393 mo
65.7014 483.585 li
64.8062 483.84 li
64.4226 482.306 li
65.1899 482.114 li
65.8293 481.922 li
cp
63.2077 484.16 mo
63.0158 484.16 li
61.6091 484.352 li
61.4812 482.817 li
62.6961 482.689 li
62.9519 482.626 li
.834104 .639216 .287846 .000335698 cmyk
f
108.863 453.787 mo
107.84 454.746 li
106.881 453.787 li
107.904 452.828 li
cp
106.817 455.705 mo
106.241 456.217 li
105.794 456.665 li
104.899 455.578 li
105.346 455.194 li
105.922 454.682 li
cp
104.707 457.56 mo
103.62 458.455 li
102.788 457.368 li
103.876 456.473 li
cp
102.533 459.286 mo
102.213 459.542 li
101.382 460.118 li
100.614 458.967 li
101.382 458.455 li
101.701 458.199 li
cp
100.231 460.885 mo
99.4634 461.46 li
99.0798 461.652 li
98.3764 460.501 li
98.6961 460.309 li
99.4634 459.734 li
cp
97.9288 462.42 mo
96.7139 463.123 li
96.0105 461.908 li
97.2254 461.205 li
cp
95.499 463.826 mo
94.2201 464.466 li
93.6446 463.187 li
94.6038 462.739 li
94.8595 462.611 li
cp
93.0052 465.041 mo
92.4936 465.297 li
91.7263 465.617 li
91.1508 464.338 li
91.9181 464.018 li
92.4297 463.826 li
cp
90.3835 466.128 mo
89.1046 466.64 li
88.657 465.297 li
89.2325 465.105 li
89.9359 464.849 li
cp
87.7618 467.087 mo
86.9945 467.279 li
86.419 467.471 li
86.0354 466.128 li
86.6109 466 li
87.3782 465.745 li
cp
85.0123 467.791 mo
84.3729 467.919 li
83.6695 468.047 li
83.4137 466.704 li
84.0531 466.576 li
84.7565 466.448 li
cp
82.2627 468.302 mo
81.8151 468.302 li
80.856 468.43 li
80.7281 467.023 li
81.6233 466.959 li
82.0709 466.896 li
cp
79.4492 468.494 mo
79.3214 468.494 li
78.1064 468.43 li
77.9785 468.43 li
78.1064 467.023 li
78.1703 467.087 li
79.3853 467.087 li
cp
76.5718 468.302 mo
75.8045 468.174 li
75.165 468.047 li
75.4847 466.704 li
75.9963 466.832 li
76.7636 466.896 li
cp
73.7583 467.663 mo
73.6944 467.663 li
72.6713 467.279 li
72.4155 467.151 li
72.991 465.872 li
73.1189 466 li
74.078 466.32 li
74.142 466.32 li
cp
71.1366 466.512 mo
70.753 466.32 li
69.9217 465.745 li
70.689 464.594 li
71.4563 465.105 li
71.7761 465.297 li
cp
68.7707 464.721 mo
68.3231 464.338 li
69.2823 463.315 li
69.7299 463.762 li
cp
68.2592 464.274 mo
67.8116 463.698 li
68.8347 462.803 li
69.3462 463.379 li
cp
66.9164 462.483 mo
66.4688 461.716 li
66.213 461.205 li
67.4919 460.629 li
67.6837 461.013 li
68.1313 461.78 li
cp
65.7014 459.862 mo
65.6375 459.798 li
65.3178 458.711 li
65.2538 458.455 li
66.6606 458.135 li
66.6606 458.327 li
66.9164 459.286 li
66.9803 459.35 li
cp
64.9981 457.048 mo
64.9341 456.537 li
64.8702 455.642 li
66.2769 455.514 li
66.3409 456.345 li
66.4048 456.856 li
cp
64.8702 454.171 mo
64.8702 453.02 li
64.9341 452.764 li
66.2769 452.892 li
66.2769 453.084 li
66.213 454.235 li
cp
65.062 451.357 mo
65.1899 450.59 li
65.3178 449.951 li
66.6606 450.206 li
66.5966 450.782 li
66.4688 451.549 li
cp
65.6375 448.544 mo
65.7654 448.032 li
66.0211 447.201 li
67.3 447.585 li
67.1082 448.352 li
66.9803 448.864 li
cp
66.4048 445.858 mo
66.5966 445.411 li
66.9164 444.515 li
68.1953 445.027 li
67.8755 445.858 li
67.7477 446.306 li
cp
67.4279 443.237 mo
67.6837 442.725 li
68.0034 441.958 li
69.2823 442.533 li
68.8986 443.301 li
68.7068 443.748 li
cp
68.6429 440.679 mo
68.9626 440.039 li
69.2823 439.464 li
70.4972 440.103 li
70.1775 440.679 li
69.8578 441.318 li
cp
69.9856 438.249 mo
70.4972 437.354 li
70.753 437.034 li
71.9039 437.801 li
71.7121 438.057 li
71.2006 438.952 li
cp
71.5203 435.819 mo
72.2876 434.732 li
73.4386 435.499 li
72.6073 436.65 li
cp
73.1189 433.581 mo
73.2468 433.389 li
73.9501 432.494 li
75.0372 433.325 li
74.3338 434.157 li
74.2059 434.412 li
cp
74.8453 431.343 mo
75.3569 430.768 li
75.7405 430.32 li
76.7636 431.215 li
76.4439 431.599 li
75.8684 432.238 li
cp
76.6357 429.233 mo
77.5948 428.21 li
78.618 429.169 li
77.6588 430.192 li
cp
78.554 427.251 mo
79.5771 426.228 li
80.5363 427.251 li
79.5771 428.21 li
cp
80.6002 425.269 mo
81.4954 424.437 li
81.6233 424.373 li
82.5185 425.396 li
82.4545 425.46 li
81.4954 426.292 li
cp
82.6464 423.478 mo
82.8382 423.286 li
83.7334 422.583 li
84.6286 423.67 li
83.7334 424.373 li
83.5416 424.501 li
cp
84.8844 421.688 mo
85.5878 421.176 li
85.9714 420.856 li
86.8027 422.007 li
86.419 422.263 li
85.7157 422.839 li
cp
87.1224 420.089 mo
88.2734 419.258 li
89.0407 420.409 li
87.8897 421.176 li
cp
89.4243 418.555 mo
89.7441 418.363 li
90.6393 417.787 li
91.3427 419.002 li
90.4474 419.514 li
90.1917 419.705 li
cp
91.8542 417.148 mo
92.4936 416.764 li
93.1331 416.444 li
93.7086 417.723 li
93.197 417.979 li
92.5576 418.363 li
cp
94.348 415.869 mo
95.3072 415.421 li
95.6269 415.293 li
96.2024 416.508 li
95.8826 416.7 li
94.9235 417.084 li
cp
96.9057 414.718 mo
98.0567 414.27 li
98.2485 414.206 li
98.6961 415.549 li
98.5682 415.613 li
97.4172 415.997 li
cp
99.5913 413.759 mo
100.742 413.439 li
100.934 413.375 li
101.254 414.718 li
101.19 414.718 li
99.975 415.102 li
cp
102.277 412.991 mo
103.428 412.736 li
103.684 412.736 li
103.876 414.078 li
103.684 414.142 li
102.597 414.334 li
cp
105.027 412.48 mo
105.986 412.352 li
106.433 412.352 li
106.561 413.695 li
106.177 413.759 li
105.218 413.887 li
cp
107.84 412.224 mo
109.311 412.224 li
109.247 413.631 li
107.904 413.631 li
cp
110.717 412.352 mo
110.845 412.352 li
111.932 412.544 li
112.124 412.544 li
111.868 413.887 li
111.741 413.887 li
110.717 413.759 li
110.59 413.759 li
cp
113.531 412.927 mo
114.106 413.055 li
114.874 413.375 li
114.426 414.654 li
113.723 414.398 li
113.147 414.206 li
cp
116.217 413.951 mo
116.984 414.398 li
117.495 414.718 li
116.728 415.869 li
116.344 415.613 li
115.577 415.166 li
cp
118.646 415.613 mo
118.71 415.677 li
119.478 416.38 li
118.455 417.404 li
117.815 416.7 li
117.751 416.636 li
cp
119.478 416.444 mo
119.669 416.636 li
118.646 417.531 li
118.455 417.34 li
cp
120.565 417.787 mo
120.757 418.043 li
121.268 418.938 li
121.332 419.066 li
120.117 419.642 li
119.606 418.874 li
119.414 418.618 li
cp
121.908 420.409 mo
122.099 420.92 li
122.355 421.752 li
121.076 422.135 li
120.82 421.432 li
120.629 420.856 li
cp
122.675 423.222 mo
122.803 424.181 li
122.867 424.629 li
121.46 424.693 li
121.46 424.373 li
121.332 423.414 li
cp
122.931 426.036 mo
122.931 426.483 li
122.867 427.443 li
121.524 427.379 li
121.524 426.036 li
cp
122.739 428.849 mo
122.739 428.913 li
122.547 430.128 li
122.547 430.32 li
121.204 430.064 li
121.204 429.936 li
121.396 428.785 li
121.396 428.721 li
cp
122.227 431.663 mo
122.035 432.686 li
121.908 433.07 li
120.565 432.686 li
120.693 432.366 li
120.948 431.343 li
cp
121.46 434.412 mo
121.204 435.308 li
121.012 435.755 li
119.733 435.244 li
119.861 434.86 li
120.181 433.965 li
cp
120.501 437.034 mo
120.117 437.929 li
119.925 438.313 li
118.71 437.737 li
118.838 437.418 li
119.222 436.523 li
cp
119.35 439.592 mo
118.71 440.871 li
117.495 440.167 li
117.559 439.975 li
118.135 438.952 li
cp
118.007 442.086 mo
117.304 443.237 li
116.153 442.533 li
116.856 441.382 li
cp
116.536 444.451 mo
115.769 445.602 li
114.618 444.835 li
115.257 443.94 li
115.385 443.684 li
cp
114.938 446.753 mo
114.554 447.329 li
114.106 447.84 li
113.019 447.009 li
113.403 446.498 li
113.851 445.922 li
cp
113.275 448.991 mo
112.444 449.951 li
112.38 450.078 li
111.293 449.119 li
111.357 449.055 li
112.188 448.096 li
cp
111.421 451.102 mo
111.293 451.229 li
110.526 452.125 li
109.503 451.166 li
110.27 450.334 li
110.398 450.206 li
cp
109.503 453.148 mo
108.863 453.787 li
107.904 452.828 li
108.543 452.189 li
f
36.7991 453.276 mo
35.9039 453.276 li
35.2006 453.212 li
35.3284 451.677 li
35.9679 451.741 li
36.8631 451.741 li
cp
33.602 453.02 mo
33.2183 452.956 li
32.3231 452.828 li
32.0034 452.7 li
32.387 451.229 li
32.6428 451.293 li
33.4741 451.421 li
33.8577 451.485 li
cp
30.4688 452.253 mo
29.8293 452.061 li
28.9981 451.677 li
28.9341 451.677 li
29.5735 450.27 li
30.3409 450.59 li
30.9803 450.782 li
cp
27.5274 450.974 mo
27.4634 450.974 li
26.76 450.526 li
26.1206 450.142 li
26.9519 448.864 li
27.5274 449.183 li
28.1668 449.567 li
28.2307 449.631 li
cp
24.8418 449.183 mo
24.7139 449.119 li
24.0744 448.544 li
23.5629 448.096 li
24.6499 447.009 li
25.0975 447.393 li
25.673 447.84 li
25.737 447.968 li
cp
22.4759 446.945 mo
22.348 446.817 li
21.8364 446.178 li
21.4528 445.666 li
22.7316 444.771 li
23.0513 445.155 li
23.4989 445.794 li
23.6268 445.922 li
cp
20.6215 444.26 mo
20.1739 443.364 li
19.9181 442.789 li
21.3249 442.15 li
21.9004 443.301 li
21.9643 443.492 li
cp
19.3427 441.254 mo
19.2787 441.126 li
19.0869 440.295 li
18.959 439.656 li
20.4936 439.336 li
20.6215 439.911 li
20.7494 440.615 li
20.8133 440.807 li
cp
18.7672 438.057 mo
18.7672 437.865 li
18.7032 436.97 li
20.2379 436.97 li
20.3018 437.737 li
20.3018 437.929 li
cp
18.7032 436.97 mo
18.7032 436.395 li
20.3018 436.459 li
20.2379 436.97 li
cp
18.8951 434.732 mo
18.8951 434.476 li
19.0869 433.709 li
19.2148 433.134 li
20.7494 433.517 li
20.6215 433.965 li
20.4297 434.732 li
20.4297 434.988 li
cp
19.7263 431.599 mo
19.7903 431.343 li
20.1739 430.64 li
20.4297 430.128 li
21.7725 430.832 li
21.5806 431.215 li
21.2609 431.919 li
21.197 432.174 li
cp
21.197 428.721 mo
21.3249 428.466 li
21.8364 427.826 li
22.1561 427.379 li
23.3711 428.338 li
23.0513 428.721 li
22.6677 429.361 li
22.5398 429.553 li
cp
23.2432 426.164 mo
24.0105 425.396 li
24.4581 425.077 li
25.4812 426.228 li
25.0975 426.547 li
24.522 427.059 li
24.3941 427.251 li
cp
25.737 424.054 mo
25.9927 423.862 li
26.6961 423.414 li
27.1437 423.222 li
27.911 424.565 li
27.5274 424.757 li
26.8879 425.141 li
26.6322 425.332 li
cp
28.5505 422.455 mo
28.9981 422.263 li
29.7654 421.943 li
30.0851 421.816 li
30.5966 423.286 li
30.3409 423.35 li
29.6375 423.67 li
29.1899 423.862 li
cp
31.6197 421.368 mo
32.3231 421.176 li
33.1544 420.984 li
33.4741 422.519 li
32.7068 422.647 li
32.0034 422.839 li
cp
34.7529 420.793 mo
34.9448 420.729 li
35.9039 420.665 li
36.3515 420.665 li
36.4155 422.199 li
35.9679 422.199 li
35.1366 422.263 li
34.9448 422.327 li
cp
38.0141 420.665 mo
38.6535 420.729 li
39.5487 420.856 li
39.6126 420.856 li
39.3569 422.391 li
38.5256 422.263 li
37.8862 422.263 li
cp
41.1473 421.112 mo
41.2752 421.176 li
42.1704 421.368 li
42.7458 421.56 li
42.2982 423.031 li
41.0194 422.711 li
40.8276 422.647 li
cp
44.2805 422.071 mo
44.6002 422.263 li
45.3675 422.583 li
45.7512 422.775 li
45.0478 424.181 li
44.7281 423.99 li
44.0247 423.67 li
43.705 423.542 li
cp
47.1579 423.542 mo
47.6055 423.862 li
48.3089 424.373 li
48.5007 424.501 li
47.5416 425.716 li
47.4137 425.588 li
46.7743 425.205 li
46.3267 424.885 li
cp
49.7157 425.524 mo
50.8666 426.675 li
49.7157 427.698 li
49.6517 427.634 li
49.1402 427.059 li
48.6926 426.675 li
cp
51.8897 427.954 mo
52.2734 428.466 li
52.721 429.169 li
52.7849 429.297 li
51.4421 430.064 li
51.3782 430 li
50.9945 429.361 li
50.6109 428.849 li
cp
53.5522 430.768 mo
53.808 431.343 li
54.0638 432.046 li
54.1277 432.302 li
52.657 432.75 li
52.657 432.622 li
52.4013 431.919 li
52.1455 431.407 li
cp
54.5753 433.901 mo
54.7032 434.476 li
54.8311 435.244 li
54.8311 435.499 li
53.2965 435.627 li
53.2965 435.499 li
53.1686 434.732 li
53.0407 434.157 li
cp
54.8951 437.162 mo
54.8951 437.801 li
54.8311 438.633 li
54.8311 438.761 li
53.2965 438.569 li
53.2965 438.505 li
53.3604 437.737 li
53.3604 437.098 li
cp
54.5114 440.359 mo
54.3195 441.063 li
54.1277 441.83 li
54.0638 441.958 li
52.5931 441.382 li
52.8489 440.679 li
53.0407 439.975 li
cp
53.4244 443.492 mo
53.1046 444.068 li
52.721 444.771 li
52.657 444.899 li
51.3142 444.068 li
51.3782 444.004 li
51.7618 443.364 li
52.0176 442.789 li
cp
51.6979 446.242 mo
51.3142 446.753 li
50.7387 447.393 li
50.6748 447.457 li
49.5238 446.434 li
49.5878 446.37 li
50.0993 445.794 li
50.483 445.283 li
cp
49.5238 448.608 mo
48.9483 449.055 li
48.3089 449.567 li
48.2449 449.631 li
47.3498 448.352 li
47.9892 447.904 li
48.5007 447.457 li
cp
46.9022 450.526 mo
46.1988 450.974 li
45.4954 451.293 li
44.792 449.951 li
45.4315 449.567 li
46.1348 449.183 li
cp
44.0247 451.933 mo
43.8329 451.997 li
43.0016 452.316 li
42.4901 452.508 li
42.0425 450.974 li
42.4901 450.846 li
43.4492 450.526 li
cp
40.8915 452.892 mo
39.5487 453.084 li
39.2929 453.148 li
39.1011 451.613 li
39.3569 451.549 li
40.1242 451.421 li
40.5718 451.357 li
cp
37.6943 453.276 mo
36.8631 453.276 li
36.7991 451.741 li
37.6304 451.741 li
f
53.4244 413.567 mo
52.1455 414.015 li
51.6979 412.736 li
52.9768 412.288 li
cp
50.8027 414.462 mo
50.6748 414.462 li
49.4599 414.846 li
49.0762 413.503 li
50.2912 413.183 li
50.3551 413.119 li
cp
48.0531 415.165 mo
47.9252 415.229 li
46.7103 415.485 li
46.4546 414.142 li
47.6055 413.887 li
47.7334 413.823 li
cp
45.3675 415.741 mo
45.2396 415.741 li
43.9608 415.933 li
43.7689 414.59 li
44.9839 414.398 li
45.1118 414.398 li
cp
42.554 416.125 mo
41.2752 416.253 li
41.1473 416.253 li
41.0833 414.846 li
41.1473 414.846 li
42.4261 414.782 li
cp
39.7405 416.316 mo
38.7174 416.38 li
38.3338 416.316 li
38.3338 414.974 li
38.6535 414.974 li
39.7405 414.91 li
cp
36.927 416.316 mo
36.2237 416.253 li
35.5203 416.253 li
35.6482 414.846 li
36.2876 414.91 li
36.991 414.91 li
cp
34.1775 416.061 mo
33.8578 416.061 li
32.7707 415.869 li
32.9625 414.526 li
33.9856 414.654 li
34.3054 414.718 li
cp
31.364 415.613 mo
30.4688 415.357 li
29.9572 415.229 li
30.3409 413.887 li
31.6837 414.27 li
cp
28.6144 414.782 mo
28.4226 414.718 li
27.4634 414.334 li
27.2716 414.27 li
27.8471 412.991 li
27.975 413.055 li
28.8702 413.439 li
29.062 413.503 li
cp
25.9927 413.631 mo
25.673 413.439 li
24.8418 412.927 li
24.7778 412.927 li
25.5451 411.777 li
26.3125 412.224 li
26.6961 412.416 li
cp
23.6268 412.096 mo
23.2432 411.84 li
22.4759 411.073 li
23.499 410.178 li
24.1384 410.753 li
24.4581 411.009 li
cp
21.5167 410.05 mo
21.3888 409.794 li
20.8133 409.091 li
20.6855 408.835 li
21.9004 408.132 li
21.9643 408.26 li
22.4119 408.963 li
22.6037 409.155 li
cp
20.046 407.556 mo
19.9821 407.492 li
19.6624 406.661 li
20.9412 406.15 li
21.2609 406.917 li
21.2609 406.981 li
cp
19.6624 406.597 mo
19.5345 406.15 li
20.8773 405.766 li
21.0052 406.213 li
cp
19.2148 404.679 mo
19.1508 403.975 li
19.0869 403.208 li
20.4936 403.208 li
20.4936 403.784 li
20.5576 404.487 li
cp
19.2148 401.737 mo
19.2787 401.226 li
19.4066 400.331 li
20.8133 400.586 li
20.6215 401.418 li
20.5576 401.929 li
cp
19.8542 398.924 mo
19.9821 398.476 li
20.3657 397.581 li
21.6446 398.157 li
21.3249 398.924 li
21.1331 399.372 li
cp
21.0052 396.302 mo
21.2609 395.727 li
21.7085 395.087 li
22.8595 395.791 li
22.4759 396.43 li
22.2201 396.942 li
cp
22.5398 393.872 mo
23.1153 393.105 li
23.3711 392.785 li
24.4581 393.617 li
24.2023 393.936 li
23.6268 394.704 li
cp
24.3302 391.698 mo
24.586 391.379 li
25.2894 390.675 li
26.2485 391.634 li
25.6091 392.338 li
25.3533 392.594 li
cp
26.3125 389.652 mo
27.1437 388.949 li
27.3995 388.757 li
28.2308 389.844 li
28.0389 389.972 li
27.2077 390.739 li
cp
28.4865 387.862 mo
29.062 387.414 li
29.5736 387.031 li
30.4048 388.181 li
29.9572 388.501 li
29.3178 389.013 li
cp
30.7885 386.263 mo
31.2361 385.943 li
31.9395 385.496 li
32.6428 386.711 li
31.9395 387.094 li
31.4919 387.414 li
cp
33.1544 384.793 mo
33.4741 384.601 li
34.3693 384.153 li
35.0087 385.368 li
34.1775 385.816 li
33.8578 386.007 li
cp
35.6482 383.514 mo
35.9039 383.322 li
36.927 382.938 li
37.5025 384.153 li
36.5434 384.601 li
36.2237 384.729 li
cp
38.2059 382.363 mo
39.4848 381.851 li
39.9963 383.13 li
38.7174 383.642 li
cp
40.8276 381.404 mo
41.2112 381.212 li
41.6588 382.554 li
41.2752 382.682 li
cp
41.2112 381.212 mo
42.1704 380.956 li
42.554 382.235 li
41.6588 382.554 li
cp
43.5132 380.572 mo
44.856 380.189 li
45.1757 381.531 li
44.3444 381.723 li
43.8329 381.851 li
cp
46.1988 379.869 mo
46.7103 379.741 li
47.6055 379.613 li
47.8613 380.956 li
46.9661 381.148 li
46.5185 381.212 li
cp
48.9483 379.357 mo
49.3959 379.293 li
50.3551 379.165 li
50.5469 380.572 li
49.5878 380.7 li
49.1402 380.764 li
cp
51.7618 379.038 mo
52.0176 379.038 li
53.1686 378.974 li
53.2325 380.38 li
52.1455 380.38 li
51.8897 380.444 li
cp
54.5114 378.91 mo
55.8542 378.91 li
55.9821 378.974 li
55.9182 380.316 li
54.5753 380.316 li
cp
57.3888 379.038 mo
58.284 379.102 li
58.7956 379.165 li
58.6038 380.508 li
58.1562 380.444 li
57.261 380.38 li
cp
60.1384 379.357 mo
60.586 379.421 li
61.5451 379.613 li
61.2894 380.956 li
60.3942 380.764 li
59.9466 380.7 li
cp
62.9519 379.933 mo
63.8471 380.189 li
64.2947 380.38 li
63.8471 381.659 li
63.4634 381.531 li
62.5682 381.276 li
cp
65.6375 380.828 mo
65.8293 380.956 li
66.7245 381.34 li
66.9164 381.467 li
66.2769 382.682 li
66.149 382.618 li
65.3178 382.235 li
65.1259 382.171 li
cp
68.1952 382.171 mo
68.451 382.363 li
69.2823 382.874 li
69.4102 383.002 li
68.515 384.089 li
68.451 384.025 li
67.7476 383.514 li
67.4919 383.322 li
cp
70.4972 383.897 mo
71.3284 384.729 li
71.5203 384.984 li
70.4332 385.816 li
70.3693 385.688 li
69.7938 385.112 li
69.538 384.92 li
cp
72.3515 386.071 mo
72.4155 386.199 li
72.8631 386.967 li
73.1189 387.414 li
71.84 387.99 li
71.7121 387.67 li
71.3284 386.967 li
71.2645 386.903 li
cp
73.6304 388.821 mo
73.8862 389.524 li
74.0141 390.164 li
72.6713 390.483 li
72.5434 389.908 li
72.3515 389.141 li
cp
74.1419 391.698 mo
74.1419 393.105 li
72.7352 393.041 li
72.7991 392.274 li
72.7991 391.698 li
cp
73.8862 394.576 mo
73.8222 394.959 li
73.5665 395.919 li
73.5665 395.983 li
72.2237 395.535 li
72.2876 395.535 li
72.4794 394.704 li
72.5434 394.32 li
cp
73.0549 397.325 mo
72.927 397.709 li
72.4794 398.604 li
72.4794 398.668 li
71.2645 398.029 li
71.6482 397.198 li
71.776 396.814 li
cp
71.776 399.883 mo
71.4563 400.395 li
71.0087 401.098 li
69.8578 400.331 li
70.2414 399.691 li
70.5611 399.18 li
cp
70.1135 402.249 mo
69.4741 403.016 li
69.2183 403.336 li
68.1952 402.377 li
68.3871 402.121 li
69.0904 401.354 li
cp
68.2592 404.359 mo
67.8755 404.743 li
67.2361 405.318 li
66.2769 404.295 li
66.9164 403.72 li
67.3 403.4 li
cp
66.213 406.277 mo
66.149 406.341 li
65.1899 407.109 li
65.1259 407.173 li
64.2308 406.086 li
64.2947 406.022 li
65.2538 405.318 li
65.3178 405.254 li
cp
63.975 408.004 mo
63.1437 408.579 li
62.824 408.835 li
62.0567 407.684 li
62.3764 407.492 li
63.2077 406.917 li
cp
61.673 409.602 mo
60.9696 409.986 li
60.4581 410.306 li
59.7547 409.091 li
60.2023 408.835 li
60.9057 408.388 li
cp
59.2432 411.009 mo
57.9643 411.649 li
57.3888 410.37 li
57.9643 410.114 li
58.6038 409.73 li
cp
56.6855 412.224 mo
56.11 412.48 li
55.4066 412.8 li
54.8951 411.521 li
55.5345 411.265 li
56.11 410.945 li
cp
54.1277 413.311 mo
53.4244 413.567 li
52.9768 412.288 li
53.6162 412.032 li
f
75.6126 266.753 mo
74.7174 266.626 li
69.7192 265.568 69.6872 258.7 74.6535 257.482 cv
75.1011 257.418 li
75.5487 257.418 li
80.9114 257.424 82.0368 264.821 77.0194 266.498 cv
76.5718 266.626 li
76.1242 266.689 li
cp
75.8684 265.155 mo
76.1881 265.155 li
76.5078 265.027 li
79.7061 263.993 79.2798 259.435 75.9323 258.952 cv
75.3569 258.952 li
71.7601 259.411 71.4862 264.224 74.9093 265.091 cv
75.229 265.155 li
75.5487 265.155 li
0 0 0 1 cmyk
f
87.5061 270.91 mo
86.6108 270.782 li
81.6339 269.654 81.5711 262.866 86.5469 261.638 cv
86.9945 261.574 li
87.4421 261.574 li
92.8453 261.593 93.9068 268.931 88.9128 270.654 cv
88.4652 270.782 li
88.0176 270.846 li
cp
87.7618 269.311 mo
88.4013 269.183 li
91.5451 268.164 91.2403 263.616 87.8258 263.109 cv
87.2503 263.109 li
83.5853 263.605 83.4627 268.412 86.8027 269.247 cv
87.1224 269.311 li
87.4421 269.311 li
f
28.6144 243.414 mo
28.1029 243.414 li
27.6553 243.35 li
22.7284 242.218 22.5931 235.343 27.5913 234.206 cv
28.4865 234.078 li
33.8961 234.227 34.9682 241.335 29.9572 243.222 cv
29.5096 243.286 li
29.062 243.414 li
cp
28.8062 241.88 mo
29.4457 241.752 li
32.6332 240.657 32.257 236.1 28.8702 235.677 cv
28.6144 235.613 li
28.2947 235.677 li
24.8076 235.911 24.3334 240.926 27.911 241.816 cv
28.1668 241.816 li
28.4865 241.88 li
f
79.769 251.215 mo
79.3213 251.151 li
78.8098 251.087 li
73.883 249.935 73.8382 243.197 78.7458 241.943 cv
79.1935 241.88 li
79.705 241.88 li
84.9718 241.923 86.2528 249.113 81.1757 250.959 cv
80.7281 251.087 li
80.2805 251.151 li
cp
80.0247 249.617 mo
80.3444 249.553 li
80.6002 249.489 li
83.8677 248.508 83.4531 243.914 80.0887 243.414 cv
79.4492 243.414 li
75.7554 244.013 75.7736 248.739 79.0656 249.553 cv
79.3853 249.617 li
79.705 249.617 li
f
88.0816 258.441 mo
87.57 258.441 li
87.1224 258.377 li
82.1551 257.201 82.1071 250.366 87.0585 249.233 cv
87.9537 249.105 li
93.3494 249.235 94.4471 256.39 89.4244 258.249 cv
88.9768 258.313 li
88.5292 258.441 li
cp
88.2734 256.906 mo
88.9128 256.778 li
92.0759 255.7 91.7508 251.091 88.3373 250.704 cv
88.0816 250.64 li
87.7618 250.704 li
84.2972 250.949 83.8016 255.965 87.3782 256.842 cv
87.6339 256.842 li
87.9537 256.906 li
f
41.0194 212.338 mo
40.5078 212.274 li
40.0602 212.21 li
35.095 211.215 35.0844 204.223 39.9963 203.066 cv
40.4439 203.002 li
40.8915 203.002 li
46.2499 202.979 47.4063 210.432 42.3622 212.082 cv
41.9146 212.21 li
41.467 212.274 li
cp
41.2112 210.739 mo
41.5309 210.739 li
41.8506 210.611 li
44.9007 209.69 44.8102 205.148 41.3391 204.537 cv
40.6997 204.537 li
37.1466 204.977 36.8311 209.915 40.316 210.675 cv
40.5718 210.739 li
40.8915 210.739 li
f
36.3515 255.308 mo
35.84 255.308 li
35.3924 255.244 li
30.4016 254.115 30.4293 247.307 35.3284 246.1 cv
35.776 246.036 li
36.2876 246.036 li
41.63 246.166 42.7895 253.314 37.6943 255.116 cv
37.2467 255.244 li
36.7991 255.308 li
cp
36.6073 253.773 mo
36.8631 253.709 li
37.1828 253.645 li
40.3768 252.685 40.0304 248.004 36.6712 247.57 cv
36.0318 247.57 li
32.4979 247.999 32.1867 252.845 35.6481 253.709 cv
35.9679 253.773 li
36.2876 253.773 li
f
52.4013 200.892 mo
51.8897 200.892 li
51.4421 200.828 li
46.5057 199.705 46.3821 192.932 51.3782 191.684 cv
51.8258 191.62 li
52.2734 191.62 li
57.6158 191.649 58.8169 198.901 53.7441 200.7 cv
53.2965 200.828 li
52.8489 200.892 li
cp
52.5931 199.357 mo
53.2325 199.229 li
56.3753 198.2 56.0854 193.579 52.657 193.155 cv
52.0815 193.155 li
48.5465 193.552 48.181 198.466 51.6979 199.293 cv
51.9536 199.357 li
52.2734 199.357 li
f
29.1259 212.338 mo
28.6144 212.274 li
28.1668 212.21 li
23.2016 211.215 23.1909 204.223 28.1028 203.066 cv
28.5504 203.002 li
28.998 203.002 li
34.3565 202.979 35.5128 210.432 30.4688 212.082 cv
30.0211 212.21 li
29.5735 212.274 li
cp
29.3178 210.739 mo
29.6375 210.739 li
29.9572 210.611 li
33.0073 209.69 32.9167 205.148 29.4456 204.537 cv
28.8062 204.537 li
25.2531 204.977 24.9377 209.915 28.4226 210.675 cv
28.6783 210.739 li
28.998 210.739 li
f
48.245 251.215 mo
47.7334 251.151 li
47.2858 251.087 li
42.3025 249.973 42.3249 243.18 47.2219 241.943 cv
47.6695 241.88 li
48.181 241.88 li
53.5224 241.998 54.668 249.229 49.5878 250.959 cv
49.1402 251.087 li
48.6926 251.151 li
cp
48.5007 249.617 mo
48.7565 249.553 li
49.0762 249.489 li
52.2883 248.538 51.9036 243.876 48.5647 243.414 cv
47.9252 243.414 li
44.2784 243.939 44.1792 248.785 47.5416 249.553 cv
47.8613 249.617 li
48.181 249.617 li
f
98.888 235.613 mo
98.4403 235.613 li
97.9927 235.549 li
93.0222 234.391 92.8976 227.64 97.9288 226.405 cv
98.3764 226.341 li
98.824 226.341 li
104.164 226.373 105.343 233.608 100.295 235.421 cv
99.8471 235.549 li
99.3995 235.613 li
cp
99.1437 234.078 mo
99.7832 233.951 li
103.011 232.818 102.525 228.35 99.2077 227.876 cv
98.5682 227.876 li
95.0706 228.325 94.7657 233.134 98.1846 234.015 cv
98.5043 234.078 li
98.824 234.078 li
f
56.4936 212.338 mo
56.046 212.274 li
55.5345 212.21 li
50.6109 211.088 50.5736 204.343 55.4705 203.066 cv
55.9821 203.002 li
56.4297 203.002 li
61.7487 203.032 62.9263 210.357 57.9004 212.082 cv
57.4528 212.21 li
57.0052 212.274 li
cp
56.7494 210.739 mo
57.0691 210.739 li
57.3888 210.611 li
60.5466 209.601 60.2066 205.09 56.8133 204.537 cv
56.1739 204.537 li
52.5238 205.136 52.4535 209.84 55.7903 210.675 cv
56.11 210.739 li
56.4297 210.739 li
f
64.2947 204.537 mo
63.7831 204.537 li
63.3355 204.473 li
58.3981 203.368 58.2979 196.446 63.2716 195.329 cv
64.1668 195.201 li
69.5615 195.34 70.657 202.519 65.6375 204.345 cv
65.1899 204.409 li
64.7423 204.537 li
cp
64.4865 203.002 mo
65.1259 202.874 li
68.2911 201.784 67.9618 197.232 64.5505 196.8 cv
63.975 196.8 li
60.5519 197.099 59.9753 202.022 63.5913 202.938 cv
63.8471 203.002 li
64.1668 203.002 li
f
106.689 247.57 mo
106.177 247.507 li
105.73 247.443 li
100.767 246.513 100.768 239.377 105.666 238.363 cv
106.114 238.235 li
106.561 238.235 li
111.924 238.303 113.1 245.636 108.032 247.315 cv
107.584 247.443 li
107.137 247.507 li
cp
106.881 245.972 mo
107.201 245.972 li
107.52 245.844 li
110.653 244.983 110.402 240.213 107.009 239.833 cv
106.689 239.769 li
106.369 239.769 li
102.861 240.196 102.479 245.148 105.986 245.908 cv
106.305 245.972 li
106.561 246.036 li
f
40.5078 239.769 mo
39.9963 239.769 li
39.5487 239.705 li
34.5814 238.615 34.5366 231.67 39.4847 230.562 cv
40.3799 230.434 li
45.7821 230.601 46.8734 237.745 41.8506 239.578 cv
41.403 239.705 li
40.9554 239.769 li
cp
40.6997 238.235 mo
41.3391 238.107 li
44.5352 237.014 44.1345 232.465 40.7636 232.032 cv
40.1881 232.032 li
36.7021 232.392 36.2407 237.288 39.8045 238.171 cv
40.0602 238.235 li
40.3799 238.235 li
f
98.888 263.109 mo
98.4403 263.109 li
97.9927 263.045 li
93.0329 261.849 92.8986 255.074 97.9288 253.901 cv
98.824 253.773 li
104.196 253.844 105.309 261.155 100.295 262.853 cv
99.3995 263.109 li
cp
99.1437 261.574 mo
99.7832 261.446 li
102.982 260.407 102.525 255.716 99.2077 255.372 cv
98.888 255.308 li
98.5682 255.372 li
98.3125 255.372 li
97.0826 255.571 96.0766 256.607 95.8187 257.801 cv
95.8187 258.057 li
95.7547 258.377 li
95.6876 259.597 96.6873 261.167 97.9288 261.382 cv
98.1846 261.51 li
98.5043 261.51 li
98.824 261.574 li
f
67.8755 286.448 mo
67.4279 286.384 li
66.9164 286.32 li
62.0045 285.268 61.964 278.403 66.8524 277.176 cv
67.3 277.112 li
67.8116 277.112 li
73.1348 277.143 74.3007 284.465 69.2823 286.192 cv
68.8347 286.32 li
68.3871 286.384 li
cp
68.1313 284.849 mo
68.451 284.849 li
68.7068 284.721 li
71.9561 283.76 71.5533 279.187 68.1952 278.647 cv
67.5558 278.647 li
64.0283 279.126 63.7352 283.93 67.1721 284.785 cv
67.4919 284.849 li
67.8116 284.849 li
f
56.4936 282.292 mo
56.046 282.292 li
55.5345 282.164 li
50.63 281.163 50.5906 274.146 55.4705 273.084 cv
55.9821 272.956 li
56.4297 272.956 li
61.7338 273.04 62.9327 280.296 57.9004 282.036 cv
57.4528 282.164 li
57.0052 282.228 li
cp
56.7494 280.693 mo
57.0691 280.693 li
57.3249 280.629 li
60.5732 279.715 60.1565 274.852 56.8133 274.554 cv
56.4936 274.491 li
56.1739 274.491 li
52.6602 274.94 52.3672 279.838 55.7903 280.629 cv
56.4297 280.757 li
f
110.781 235.613 mo
110.334 235.613 li
109.886 235.549 li
104.916 234.391 104.791 227.64 109.822 226.405 cv
110.27 226.341 li
110.717 226.341 li
116.058 226.373 117.236 233.608 112.188 235.421 cv
111.741 235.549 li
111.293 235.613 li
cp
111.037 234.078 mo
111.677 233.951 li
114.905 232.818 114.419 228.35 111.101 227.876 cv
110.462 227.876 li
106.964 228.325 106.659 233.134 110.078 234.014 cv
110.398 234.078 li
110.717 234.078 li
f
62.3764 290.029 mo
60.7778 290.029 li
60.8418 288.494 li
62.3125 288.494 li
cp
59.1793 289.901 mo
58.7956 289.837 li
57.5807 289.645 li
57.8364 288.11 li
58.9874 288.302 li
59.3071 288.366 li
cp
55.9821 289.261 mo
54.8311 288.878 li
54.4475 288.686 li
55.0869 287.279 li
55.3427 287.407 li
56.4297 287.727 li
cp
52.9768 287.983 mo
52.5931 287.791 li
51.634 287.151 li
52.4652 285.872 li
53.2965 286.384 li
53.6801 286.64 li
cp
50.2912 286.128 mo
50.1633 286 li
49.7157 285.617 li
49.332 285.169 li
49.1402 284.913 li
50.3551 283.954 li
50.483 284.146 li
50.8027 284.53 li
51.1864 284.849 li
51.3142 284.977 li
cp
48.181 283.507 mo
47.8613 282.867 li
47.6695 282.356 li
47.5416 281.972 li
49.0123 281.46 li
49.0762 281.78 li
49.2681 282.228 li
49.5238 282.739 li
cp
47.1579 280.309 mo
47.1579 279.734 li
48.6926 279.67 li
48.6926 280.118 li
cp
47.1579 279.67 mo
47.1579 279.158 li
47.2219 278.647 li
47.2858 278.519 li
48.7565 278.775 li
48.7565 279.222 li
48.6926 279.734 li
cp
47.7334 276.856 mo
47.8613 276.537 li
48.0531 276.025 li
48.3089 275.578 li
48.5007 275.322 li
49.7796 276.217 li
49.7157 276.345 li
49.4599 276.729 li
49.2681 277.112 li
49.1402 277.432 li
cp
49.5238 274.043 mo
49.7157 273.787 li
50.0993 273.403 li
50.5469 273.02 li
50.7388 272.892 li
51.6979 274.107 li
51.57 274.171 li
51.1864 274.491 li
50.8666 274.874 li
50.6748 275.066 li
cp
52.0816 271.933 mo
52.5292 271.613 li
53.4883 271.165 li
54.1917 272.508 li
53.3604 272.956 li
52.9128 273.212 li
cp
55.0229 270.462 mo
56.046 270.142 li
56.5576 270.014 li
56.9412 271.485 li
56.5576 271.613 li
55.4706 271.933 li
cp
58.0922 269.631 mo
58.7316 269.567 li
59.6908 269.439 li
59.8826 270.974 li
58.9874 271.038 li
58.4119 271.165 li
cp
61.2894 269.311 mo
61.6091 269.311 li
61.673 270.91 li
61.3533 270.91 li
cp
61.673 269.311 mo
62.3764 269.311 li
62.888 269.375 li
62.824 270.91 li
61.6091 270.91 li
cp
64.5505 269.567 mo
65.8293 269.759 li
66.1491 269.823 li
65.7654 271.357 li
65.5736 271.293 li
64.2947 271.038 li
cp
67.6837 270.27 mo
68.451 270.526 li
69.2183 270.846 li
68.5789 272.253 li
67.9395 271.997 li
67.1721 271.741 li
cp
70.6251 271.549 mo
70.689 271.613 li
71.7761 272.253 li
72.0318 272.508 li
71.0727 273.723 li
70.9448 273.595 li
69.9857 272.956 li
69.9217 272.956 li
cp
73.3107 273.531 mo
73.9501 274.171 li
74.2698 274.618 li
74.3977 274.81 li
73.1828 275.705 li
73.0549 275.641 li
72.7991 275.258 li
72.4794 274.874 li
72.2237 274.682 li
cp
75.2929 276.217 mo
75.4208 276.473 li
75.8045 277.496 li
75.8684 277.879 li
74.3977 278.263 li
74.3338 278.007 li
74.2059 277.56 li
73.8862 276.92 li
cp
76.1242 279.542 mo
76.1242 279.67 li
74.5896 279.734 li
74.5896 279.606 li
cp
76.1242 279.734 mo
76.1242 280.181 li
76.0603 280.757 li
75.9324 281.268 li
74.3977 281.013 li
74.5256 280.565 li
74.5256 280.181 li
74.5896 279.67 li
cp
75.4208 282.931 mo
74.9732 283.826 li
74.6535 284.274 li
74.5256 284.402 li
73.3107 283.507 li
73.3107 283.443 li
73.8222 282.675 li
74.0141 282.228 li
cp
73.5025 285.681 mo
73.1828 286 li
72.7352 286.384 li
72.2237 286.768 li
71.2645 285.553 li
71.7121 285.233 li
72.3515 284.594 li
cp
70.8809 287.663 mo
70.753 287.727 li
69.6659 288.302 li
69.4102 288.43 li
68.7707 287.023 li
68.9626 286.959 li
69.9217 286.448 li
70.0496 286.384 li
cp
67.8755 289.006 mo
67.2361 289.261 li
66.3409 289.517 li
65.9572 287.983 li
66.7245 287.791 li
67.4279 287.535 li
cp
64.8063 289.773 mo
64.5505 289.837 li
63.2077 290.029 li
63.0158 288.43 li
64.2947 288.302 li
64.4865 288.302 li
.834104 .639216 .287846 .000335698 cmyk
f
38.3338 258.952 mo
37.4386 258.952 li
36.7352 258.888 li
36.8631 257.354 li
37.5025 257.418 li
38.3977 257.418 li
cp
35.1366 258.697 mo
34.753 258.633 li
33.8578 258.441 li
33.538 258.377 li
33.9217 256.842 li
34.1775 256.906 li
35.0087 257.098 li
35.3924 257.162 li
cp
32.0034 257.929 mo
31.364 257.673 li
30.5966 257.354 li
30.4688 257.354 li
31.1721 255.947 li
31.8755 256.203 li
32.515 256.459 li
cp
29.062 256.65 mo
28.2947 256.203 li
27.6553 255.819 li
28.4865 254.476 li
29.062 254.86 li
29.7654 255.244 li
cp
26.3764 254.86 mo
26.2485 254.732 li
25.6091 254.221 li
25.1615 253.773 li
26.1846 252.622 li
26.6322 253.07 li
27.2077 253.517 li
27.3356 253.645 li
cp
24.0105 252.622 mo
23.8826 252.43 li
23.3711 251.791 li
23.0514 251.279 li
24.2663 250.384 li
24.586 250.832 li
25.0975 251.407 li
25.2254 251.599 li
cp
22.1562 249.936 mo
22.0922 249.745 li
21.7086 249.041 li
21.4528 248.466 li
22.8595 247.826 li
23.435 248.977 li
23.499 249.169 li
cp
20.8773 246.931 mo
20.8773 246.739 li
20.6215 245.972 li
20.4936 245.332 li
22.0283 245.013 li
22.1562 245.588 li
22.348 246.292 li
22.348 246.419 li
cp
20.3018 243.67 mo
20.3018 242.647 li
21.8364 242.583 li
21.8364 243.542 li
cp
20.3018 242.583 mo
20.3018 242.071 li
21.8364 242.071 li
21.8364 242.647 li
cp
20.4297 240.409 mo
20.4936 240.153 li
20.6215 239.322 li
20.7494 238.81 li
22.284 239.194 li
22.1562 239.641 li
22.0283 240.409 li
21.9643 240.665 li
cp
21.261 237.276 mo
21.3888 237.02 li
21.7086 236.253 li
21.9643 235.741 li
23.3711 236.444 li
23.1153 236.892 li
22.7956 237.595 li
22.7316 237.787 li
cp
22.7956 234.334 mo
22.9235 234.142 li
23.3711 233.503 li
23.7547 233.055 li
24.9697 234.014 li
24.6499 234.398 li
24.2023 234.974 li
24.0744 235.165 li
cp
24.8418 231.84 mo
24.9697 231.649 li
25.6091 231.073 li
25.9928 230.689 li
27.0158 231.904 li
26.6322 232.224 li
25.9288 232.927 li
cp
27.3356 229.73 mo
27.5913 229.538 li
28.2947 229.091 li
28.6784 228.835 li
29.4457 230.178 li
29.126 230.37 li
28.4226 230.817 li
28.1668 231.009 li
cp
30.149 228.132 mo
30.5327 227.94 li
31.364 227.62 li
31.6198 227.492 li
32.1313 228.963 li
31.9395 229.027 li
31.1721 229.347 li
30.7885 229.538 li
cp
33.1544 226.981 mo
33.8578 226.853 li
34.689 226.661 li
35.0087 228.196 li
34.2414 228.324 li
33.538 228.515 li
cp
36.2876 226.405 mo
36.4794 226.405 li
37.4386 226.341 li
37.9501 226.341 li
37.9501 227.876 li
37.5025 227.876 li
36.6712 227.94 li
36.4794 227.94 li
cp
39.5487 226.341 mo
40.1881 226.405 li
41.0833 226.469 li
41.1473 226.533 li
40.8915 228.068 li
40.0602 227.94 li
39.4208 227.876 li
cp
42.7459 226.789 mo
42.8737 226.789 li
43.705 227.045 li
44.2805 227.237 li
43.8329 228.707 li
43.3214 228.515 li
42.554 228.324 li
42.4261 228.324 li
cp
45.8151 227.748 mo
46.1348 227.876 li
46.9661 228.26 li
47.2858 228.451 li
46.5824 229.794 li
46.3267 229.666 li
45.5594 229.347 li
45.2396 229.219 li
cp
48.6926 229.219 mo
49.1402 229.538 li
49.8436 229.986 li
50.0354 230.178 li
49.0762 231.393 li
48.9483 231.265 li
48.3089 230.817 li
47.8613 230.562 li
cp
51.2503 231.201 mo
51.6979 231.585 li
52.2734 232.224 li
52.4013 232.352 li
51.2503 233.375 li
51.1864 233.311 li
50.6748 232.736 li
50.2272 232.352 li
cp
53.4883 233.631 mo
53.808 234.142 li
54.2556 234.782 li
54.3835 234.974 li
53.0407 235.741 li
52.9768 235.677 li
52.5292 235.038 li
52.2094 234.526 li
cp
55.0869 236.444 mo
55.3427 236.956 li
55.6624 237.723 li
55.7263 237.979 li
54.2556 238.427 li
54.1917 238.299 li
53.9359 237.595 li
53.6801 237.084 li
cp
56.11 239.514 mo
56.2379 240.089 li
56.3658 240.92 li
56.3658 241.176 li
54.8311 241.304 li
54.8311 241.176 li
54.7032 240.409 li
54.6393 239.833 li
cp
56.4936 242.775 mo
56.4297 243.478 li
56.3658 244.309 li
56.3658 244.437 li
54.8311 244.245 li
54.8311 244.181 li
54.8951 243.414 li
54.8951 242.775 li
cp
56.046 246.036 mo
55.9182 246.739 li
55.6624 247.507 li
55.5984 247.634 li
54.1277 247.059 li
54.1917 246.995 li
54.3835 246.355 li
54.5753 245.652 li
cp
54.959 249.105 mo
54.7032 249.745 li
54.2556 250.448 li
54.1917 250.576 li
52.9128 249.745 li
52.9128 249.681 li
53.2965 249.041 li
53.6162 248.402 li
cp
53.2965 251.919 mo
52.8489 252.43 li
52.3373 253.006 li
52.2094 253.133 li
51.1224 252.046 li
51.1224 251.983 li
51.634 251.471 li
52.0816 250.959 li
cp
51.0585 254.284 mo
50.5469 254.732 li
49.8436 255.244 li
49.7796 255.308 li
48.8844 254.029 li
49.5238 253.581 li
50.0354 253.133 li
cp
48.4368 256.203 mo
47.03 256.97 li
46.3267 255.563 li
46.9661 255.244 li
47.6695 254.86 li
cp
45.5594 257.609 mo
45.4315 257.673 li
44.6002 257.993 li
44.0247 258.121 li
43.5771 256.65 li
44.0887 256.522 li
44.792 256.267 li
44.9839 256.203 li
cp
42.4261 258.569 mo
42.0425 258.633 li
41.1473 258.76 li
40.8276 258.824 li
40.6997 257.29 li
40.8915 257.226 li
41.7228 257.098 li
42.1064 257.034 li
cp
39.229 258.952 mo
38.3977 258.952 li
38.3338 257.418 li
39.229 257.418 li
f
37.8223 219.308 mo
36.5434 219.691 li
36.4155 219.691 li
36.1597 218.348 li
36.2237 218.348 li
36.7991 218.221 li
37.4386 218.029 li
cp
35.0087 220.011 mo
34.6251 220.011 li
33.9857 220.075 li
33.602 220.075 li
33.5381 218.732 li
33.9217 218.732 li
34.4972 218.668 li
34.8169 218.604 li
cp
32.1313 220.075 mo
31.5558 220.011 li
30.9164 219.947 li
30.7245 219.947 li
30.9164 218.54 li
31.1082 218.604 li
31.6198 218.668 li
32.1952 218.732 li
cp
29.3178 219.627 mo
29.1899 219.563 li
28.1029 219.18 li
27.9111 219.116 li
28.4226 217.837 li
28.5505 217.901 li
29.5096 218.221 li
29.6375 218.284 li
cp
26.5682 218.476 mo
26.0567 218.157 li
25.3533 217.709 li
26.1846 216.558 li
26.6961 216.942 li
27.2716 217.261 li
cp
24.2663 216.75 mo
23.499 215.919 li
23.2432 215.599 li
24.3942 214.768 li
24.5221 215.023 li
25.1615 215.727 li
cp
22.4759 214.32 mo
22.2841 214 li
21.9004 212.977 li
23.1793 212.53 li
23.3071 212.913 li
23.499 213.361 li
23.6908 213.744 li
cp
21.5167 211.57 mo
21.4528 211.251 li
21.3888 210.675 li
21.3888 210.036 li
22.7317 210.036 li
22.7956 210.547 li
22.8595 210.995 li
22.8595 211.315 li
cp
21.4528 208.565 mo
21.4528 208.437 li
21.5807 207.862 li
21.7086 207.35 li
21.7725 207.158 li
23.1153 207.542 li
23.0514 207.67 li
22.9235 208.117 li
22.8595 208.629 li
22.8595 208.757 li
cp
22.2201 205.752 mo
22.2841 205.688 li
22.4759 205.176 li
22.7956 204.665 li
22.9235 204.409 li
24.0745 205.112 li
24.0105 205.304 li
23.7547 205.752 li
23.5629 206.199 li
23.499 206.263 li
cp
23.6908 203.258 mo
23.6908 203.194 li
24.4581 202.299 li
24.6499 202.107 li
25.673 203.066 li
25.5452 203.194 li
24.8418 204.025 li
cp
25.737 201.084 mo
26.2485 200.636 li
26.824 200.189 li
27.6553 201.34 li
27.1437 201.659 li
26.6322 202.171 li
cp
28.0389 199.421 mo
29.3178 198.782 li
29.9572 200.061 li
29.062 200.444 li
28.7423 200.636 li
cp
30.6606 198.27 mo
30.7885 198.206 li
31.3 199.485 li
31.1721 199.549 li
cp
30.8524 198.206 mo
31.4919 198.014 li
32.0674 197.823 li
32.3871 199.165 li
31.8755 199.293 li
31.2361 199.485 li
cp
33.4741 197.567 mo
34.0496 197.503 li
34.689 197.439 li
34.9448 197.439 li
35.0087 198.782 li
34.753 198.782 li
34.1775 198.846 li
33.6659 198.91 li
cp
36.3515 197.439 mo
36.5434 197.439 li
37.1189 197.503 li
37.7583 197.567 li
37.8223 197.567 li
37.5665 198.91 li
37.0549 198.846 li
36.4794 198.782 li
36.2876 198.782 li
cp
39.229 197.887 mo
39.4848 197.951 li
40.5718 198.334 li
40.1242 199.613 li
39.1651 199.293 li
38.9093 199.229 li
cp
41.9785 198.974 mo
42.6819 199.357 li
43.1935 199.741 li
42.3622 200.828 li
41.9785 200.572 li
41.2752 200.125 li
cp
44.2805 200.636 mo
44.4084 200.764 li
45.1757 201.595 li
45.3036 201.787 li
44.2166 202.618 li
44.1526 202.554 li
43.5132 201.787 li
43.3853 201.659 li
cp
46.1349 203.002 mo
46.3906 203.514 li
46.5825 204.025 li
46.7103 204.345 li
45.4315 204.856 li
45.3675 204.601 li
45.1757 204.153 li
44.9199 203.705 li
cp
47.1579 205.816 mo
47.2219 206.263 li
47.2858 206.839 li
47.2858 207.286 li
45.943 207.35 li
45.8791 206.967 li
45.8791 206.519 li
45.7512 206.071 li
cp
47.2219 208.757 mo
47.2219 209.077 li
47.094 209.652 li
46.9661 210.164 li
46.9661 210.228 li
45.6233 209.844 li
45.7512 209.396 li
45.8151 208.885 li
45.8791 208.629 li
cp
46.5185 211.634 mo
46.3906 211.826 li
46.1988 212.338 li
45.8791 212.849 li
45.8151 212.913 li
44.6642 212.274 li
44.6642 212.21 li
44.9199 211.762 li
45.1118 211.315 li
45.2397 211.123 li
cp
45.0478 214.192 mo
44.9199 214.32 li
44.2166 215.215 li
44.0887 215.343 li
43.1295 214.32 li
43.8329 213.489 li
43.9608 213.361 li
cp
43.0656 216.302 mo
42.4261 216.878 li
41.9785 217.197 li
41.1473 216.11 li
41.5309 215.855 li
42.1704 215.279 li
cp
40.7636 218.029 mo
40.316 218.284 li
39.4848 218.668 li
38.9093 217.389 li
39.6127 217.07 li
40.0603 216.814 li
cp
38.142 219.18 mo
37.8862 219.308 li
37.3746 218.029 li
37.6944 217.901 li
f
74.142 270.59 mo
73.1189 269.567 li
74.142 268.672 li
75.1011 269.631 li
cp
72.2237 268.544 mo
71.9039 268.224 li
71.3285 267.457 li
72.4155 266.562 li
72.991 267.329 li
73.2467 267.649 li
cp
70.4972 266.242 mo
69.7299 265.091 li
70.8809 264.387 li
71.2645 264.899 li
71.6482 265.474 li
cp
69.0265 263.812 mo
68.5789 262.981 li
68.3871 262.533 li
69.6659 262.022 li
69.8578 262.341 li
70.2414 263.236 li
cp
67.8755 261.254 mo
67.8116 261.126 li
67.4919 260.231 li
67.4279 259.911 li
68.7068 259.464 li
68.8347 259.784 li
69.0905 260.615 li
69.1544 260.743 li
cp
67.0443 258.505 mo
66.9803 258.377 li
66.7885 257.418 li
66.7245 257.098 li
68.1313 256.906 li
68.1313 257.162 li
68.3231 257.993 li
68.3871 258.185 li
cp
66.5327 255.691 mo
66.5327 255.563 li
66.4688 254.668 li
66.4688 254.284 li
67.8755 254.22 li
67.8755 254.54 li
67.9395 255.435 li
67.9395 255.563 li
cp
66.4688 252.878 mo
66.4688 252.814 li
66.5327 251.919 li
66.5967 251.407 li
68.0034 251.599 li
67.9395 252.046 li
67.8755 252.878 li
cp
66.8524 250 mo
67.2361 248.594 li
68.5789 248.977 li
68.3871 249.617 li
68.1953 250.32 li
cp
67.7477 247.251 mo
67.9395 246.803 li
68.3231 246.036 li
68.3871 245.908 li
69.602 246.611 li
69.5381 246.611 li
69.2183 247.379 li
69.0265 247.762 li
cp
69.0905 244.693 mo
69.2183 244.501 li
69.7938 243.798 li
69.9857 243.542 li
71.0727 244.437 li
70.8809 244.629 li
70.3693 245.268 li
70.2414 245.46 li
cp
71.0087 242.455 mo
71.6482 241.879 li
72.0958 241.496 li
72.927 242.583 li
72.5434 242.903 li
71.9039 243.478 li
cp
73.2467 240.665 mo
73.7583 240.345 li
74.5256 239.961 li
75.1651 241.176 li
74.5256 241.56 li
74.0141 241.879 li
cp
75.8684 239.386 mo
76.1881 239.258 li
77.0194 239.002 li
77.2112 238.938 li
77.5949 240.281 li
77.467 240.281 li
76.316 240.665 li
cp
78.618 238.618 mo
78.7459 238.618 li
79.5771 238.427 li
80.0247 238.427 li
80.1526 239.769 li
79.8329 239.833 li
79.0016 239.961 li
78.8737 239.961 li
cp
81.4954 238.299 mo
82.3267 238.299 li
82.9022 238.363 li
82.8382 239.705 li
81.4954 239.705 li
cp
84.3089 238.49 mo
85.0762 238.618 li
85.7157 238.746 li
85.4599 240.089 li
84.8844 239.961 li
84.1171 239.833 li
cp
87.1224 239.066 mo
87.8258 239.258 li
88.4652 239.514 li
88.0176 240.792 li
87.4421 240.601 li
86.7388 240.409 li
cp
89.808 240.025 mo
90.5753 240.345 li
91.0869 240.601 li
90.5114 241.816 li
89.9998 241.624 li
89.2965 241.24 li
cp
92.3658 241.24 mo
93.261 241.752 li
93.5807 242.007 li
92.8134 243.158 li
92.5576 242.966 li
91.7263 242.455 li
91.6624 242.455 li
cp
94.7317 242.775 mo
94.9874 242.966 li
95.8187 243.606 li
95.8826 243.67 li
94.9874 244.693 li
94.9235 244.693 li
94.1562 244.054 li
93.9643 243.926 li
cp
96.9697 244.565 mo
97.9288 245.524 li
96.9697 246.547 li
96.0105 245.588 li
cp
98.9519 246.611 mo
99.5913 247.379 li
99.8471 247.698 li
98.7601 248.53 li
98.5682 248.274 li
97.8649 247.506 li
cp
100.678 248.785 mo
100.87 249.105 li
101.446 249.936 li
101.51 250 li
100.295 250.704 li
99.7832 249.872 li
99.5913 249.617 li
cp
102.213 251.215 mo
102.852 252.494 li
101.638 253.07 li
101.254 252.366 li
100.998 251.855 li
cp
103.428 253.773 mo
103.684 254.476 li
103.939 255.116 li
102.661 255.563 li
102.405 254.988 li
102.149 254.284 li
cp
104.323 256.458 mo
104.579 257.226 li
104.707 257.865 li
103.3 258.121 li
103.236 257.609 li
103.044 256.842 li
cp
104.899 259.272 mo
105.027 260.039 li
105.027 260.679 li
103.684 260.807 li
103.62 260.231 li
103.556 259.464 li
cp
105.09 262.149 mo
105.027 262.789 li
105.027 263.556 li
103.62 263.428 li
103.684 262.789 li
103.684 262.086 li
cp
104.771 264.963 mo
104.707 265.474 li
104.515 266.306 li
104.515 266.434 li
103.172 265.986 li
103.364 265.219 li
103.428 264.771 li
cp
104.067 267.776 mo
103.939 267.968 li
103.62 268.8 li
103.492 269.119 li
102.213 268.48 li
102.341 268.288 li
102.661 267.521 li
102.725 267.265 li
cp
102.788 270.398 mo
102.341 271.102 li
101.957 271.549 li
100.87 270.718 li
101.19 270.334 li
101.638 269.631 li
cp
100.998 272.7 mo
100.55 273.148 li
99.5913 272.125 li
100.039 271.741 li
cp
100.55 273.148 mo
99.975 273.659 li
99.0798 272.636 li
99.5913 272.125 li
cp
98.824 274.554 mo
98.5043 274.81 li
97.737 275.258 li
97.6091 275.322 li
96.9697 274.107 li
97.0336 274.043 li
97.737 273.659 li
98.0567 273.403 li
cp
96.3302 275.961 mo
96.2024 276.025 li
95.3711 276.345 li
94.9235 276.473 li
94.5398 275.194 li
94.8595 275.066 li
95.6269 274.746 li
95.7548 274.682 li
cp
93.5807 276.856 mo
92.8134 277.048 li
92.1739 277.112 li
91.9821 275.769 li
92.5576 275.641 li
93.261 275.514 li
cp
90.7032 277.24 mo
90.1277 277.304 li
89.2965 277.304 li
89.2965 275.897 li
90.6393 275.897 li
cp
87.8258 277.176 mo
86.483 276.984 li
86.419 276.984 li
86.6748 275.641 li
88.0176 275.833 li
cp
85.0762 276.728 mo
83.7334 276.345 li
83.6695 276.345 li
84.1171 275.002 li
84.9484 275.258 li
85.396 275.386 li
cp
82.3267 275.833 mo
81.8791 275.705 li
81.0478 275.322 li
81.5594 274.043 li
82.3906 274.363 li
82.8382 274.554 li
cp
79.769 274.682 mo
79.1935 274.363 li
78.554 273.979 li
79.2574 272.764 li
79.8329 273.148 li
80.4084 273.467 li
cp
77.3391 273.212 mo
76.5718 272.7 li
76.1881 272.38 li
77.0194 271.293 li
77.4031 271.549 li
78.1064 272.061 li
cp
75.1011 271.485 mo
74.9093 271.357 li
74.142 270.59 li
75.1011 269.567 li
75.8045 270.27 li
75.9963 270.398 li
f
94.6677 242.455 mo
94.1562 241.879 li
93.8365 241.368 li
94.9235 240.537 li
95.2432 240.984 li
95.7547 241.624 li
cp
93.0052 240.217 mo
92.8134 239.833 li
92.4297 239.194 li
92.3018 238.938 li
93.5167 238.299 li
93.5807 238.491 li
94.1562 239.45 li
cp
91.6624 237.659 mo
91.4066 237.02 li
91.1508 236.316 li
92.4297 235.869 li
92.6855 236.508 li
92.9413 237.084 li
cp
90.7672 234.91 mo
90.7672 234.846 li
90.5753 234.142 li
90.5114 233.503 li
91.8542 233.311 li
91.9182 233.823 li
92.0461 234.526 li
92.11 234.59 li
cp
90.3196 232.096 mo
90.3196 230.625 li
91.6624 230.689 li
91.6624 231.84 li
91.7263 231.968 li
cp
90.4474 229.219 mo
90.4474 229.027 li
90.5753 228.324 li
90.7032 227.748 li
92.0461 228.068 li
91.9182 228.579 li
91.7903 229.219 li
91.7903 229.347 li
cp
91.0869 226.341 mo
91.0869 226.277 li
91.3427 225.638 li
91.6624 224.998 li
92.8773 225.574 li
92.6215 226.149 li
92.4297 226.725 li
92.3658 226.789 li
cp
92.3658 223.72 mo
92.7494 223.144 li
93.1331 222.633 li
93.197 222.505 li
94.2841 223.464 li
93.8365 223.975 li
93.5167 224.487 li
cp
94.2201 221.482 mo
94.6677 221.034 li
95.5629 222.057 li
95.1153 222.505 li
cp
94.6677 221.034 mo
95.2432 220.586 li
95.3071 220.522 li
96.1384 221.609 li
96.0745 221.673 li
95.5629 222.121 li
cp
96.5221 219.691 mo
97.673 219.116 li
97.8649 219.052 li
98.3764 220.331 li
98.2485 220.395 li
97.673 220.65 li
97.2254 220.906 li
cp
99.2077 218.54 mo
99.6553 218.412 li
100.614 218.221 li
100.87 219.563 li
100.614 219.627 li
100.039 219.755 li
99.5913 219.883 li
cp
102.085 218.029 mo
102.405 218.029 li
103.108 217.965 li
103.492 218.029 li
103.492 219.371 li
102.533 219.371 li
102.149 219.435 li
cp
104.963 218.093 mo
105.282 218.157 li
105.986 218.284 li
106.369 218.348 li
106.05 219.691 li
105.794 219.627 li
105.09 219.499 li
104.771 219.499 li
cp
107.776 218.732 mo
108.16 218.86 li
108.863 219.116 li
109.119 219.244 li
108.543 220.522 li
108.352 220.395 li
107.712 220.139 li
107.328 220.011 li
cp
110.398 219.819 mo
110.909 220.075 li
111.549 220.459 li
111.677 220.522 li
110.909 221.673 li
110.845 221.673 li
110.27 221.29 li
109.758 221.034 li
cp
112.828 221.354 mo
112.892 221.354 li
113.467 221.865 li
113.979 222.249 li
113.083 223.272 li
112.636 222.952 li
112.06 222.505 li
112.06 222.441 li
cp
115.002 223.208 mo
115.257 223.528 li
115.833 224.103 li
114.81 225.062 li
114.298 224.487 li
114.042 224.167 li
cp
115.833 224.167 mo
115.961 224.295 li
114.938 225.19 li
114.81 225.062 li
cp
116.856 225.382 mo
116.856 225.446 li
117.304 226.086 li
117.623 226.597 li
116.472 227.3 li
116.217 226.853 li
115.769 226.277 li
115.769 226.213 li
cp
118.327 227.876 mo
118.519 228.132 li
118.838 228.899 li
118.966 229.155 li
117.687 229.666 li
117.559 229.475 li
117.304 228.771 li
117.112 228.515 li
cp
119.478 230.498 mo
119.606 231.009 li
119.797 231.776 li
119.861 231.904 li
118.455 232.224 li
118.455 232.096 li
118.263 231.457 li
118.135 230.945 li
cp
120.117 233.311 mo
120.181 233.951 li
120.245 234.718 li
120.245 234.782 li
118.838 234.782 li
118.838 234.142 li
118.71 233.503 li
cp
120.245 236.189 mo
120.117 237.595 li
120.117 237.659 li
118.774 237.403 li
118.838 236.764 li
118.838 236.125 li
cp
119.797 239.066 mo
119.669 239.641 li
119.414 240.345 li
119.414 240.473 li
118.135 239.961 li
118.135 239.897 li
118.327 239.322 li
118.519 238.682 li
cp
118.838 241.816 mo
118.582 242.263 li
118.199 242.839 li
118.071 243.094 li
116.92 242.263 li
117.048 242.135 li
117.368 241.624 li
117.623 241.176 li
cp
117.24 244.245 mo
116.217 245.268 li
115.257 244.245 li
115.449 244.117 li
115.897 243.67 li
116.153 243.35 li
cp
115.066 246.228 mo
114.746 246.483 li
114.17 246.867 li
113.851 246.995 li
113.211 245.78 li
113.403 245.652 li
113.979 245.332 li
114.298 245.077 li
cp
112.572 247.634 mo
111.613 248.018 li
111.165 248.146 li
110.781 246.803 li
111.101 246.675 li
111.741 246.483 li
111.996 246.355 li
cp
109.758 248.466 mo
109.503 248.466 li
108.863 248.594 li
108.288 248.594 li
108.224 247.251 li
108.671 247.187 li
109.311 247.123 li
109.503 247.059 li
cp
106.881 248.657 mo
106.689 248.594 li
105.986 248.594 li
105.41 248.53 li
105.602 247.123 li
106.114 247.187 li
106.753 247.251 li
106.881 247.251 li
cp
104.003 248.21 mo
103.812 248.21 li
103.108 248.018 li
102.597 247.826 li
103.044 246.547 li
103.492 246.675 li
104.131 246.867 li
104.323 246.867 li
cp
101.254 247.315 mo
100.998 247.251 li
100.295 246.931 li
99.975 246.739 li
100.614 245.524 li
100.934 245.652 li
101.574 245.972 li
101.829 246.036 li
cp
98.7601 245.972 mo
98.3125 245.716 li
97.673 245.268 li
97.5452 245.141 li
98.3764 244.054 li
98.5043 244.117 li
99.0798 244.565 li
99.4634 244.821 li
cp
96.4581 244.245 mo
95.8187 243.67 li
95.435 243.286 li
96.3942 242.327 li
96.7778 242.711 li
97.3533 243.222 li
f
64.9981 216.942 mo
64.3587 217.133 li
63.7192 217.261 li
63.5913 217.261 li
63.3995 215.919 li
63.975 215.791 li
64.6144 215.599 li
cp
62.1206 217.453 mo
60.6499 217.453 li
60.7778 216.046 li
60.9697 216.046 li
61.6091 216.11 li
62.1206 216.046 li
cp
59.2432 217.197 mo
58.8595 217.133 li
58.1562 216.942 li
57.8365 216.878 li
58.2841 215.535 li
58.5398 215.663 li
59.499 215.855 li
cp
56.4936 216.302 mo
56.1739 216.174 li
55.5345 215.855 li
55.2148 215.663 li
55.8542 214.448 li
56.1739 214.64 li
56.7494 214.959 li
57.0691 215.087 li
cp
53.9999 214.895 mo
53.6801 214.704 li
53.0407 214.192 li
52.8489 214 li
53.7441 212.977 li
53.9359 213.105 li
54.4475 213.553 li
54.7672 213.744 li
cp
51.7618 213.041 mo
50.8027 212.082 li
50.8027 212.018 li
51.8258 211.123 li
52.3373 211.698 li
52.721 212.082 li
cp
49.9075 210.867 mo
49.8436 210.803 li
49.332 210.164 li
49.0762 209.716 li
50.2272 208.949 li
50.483 209.332 li
50.9306 209.972 li
50.9945 210.036 li
cp
48.3089 208.501 mo
48.0531 207.99 li
47.7334 207.222 li
47.6695 207.222 li
48.9483 206.647 li
49.2681 207.35 li
49.5238 207.798 li
cp
47.1579 205.879 mo
47.03 205.624 li
46.7103 204.792 li
48.0531 204.345 li
48.3089 205.112 li
48.4368 205.368 li
cp
46.7103 204.792 mo
46.6464 204.537 li
47.9892 204.153 li
48.0531 204.345 li
cp
46.2627 203.194 mo
46.2627 203.13 li
46.0709 202.299 li
45.943 201.787 li
47.3498 201.531 li
47.4137 201.979 li
47.6055 202.746 li
47.6055 202.81 li
cp
45.7512 200.38 mo
45.6872 199.805 li
45.6233 198.974 li
47.03 198.91 li
47.094 199.613 li
47.1579 200.252 li
cp
45.6233 197.503 mo
45.6233 197.311 li
45.6872 196.544 li
45.7512 196.096 li
47.094 196.224 li
47.094 196.608 li
47.03 197.375 li
47.03 197.567 li
cp
45.943 194.689 mo
46.007 194.242 li
46.1988 193.474 li
46.2627 193.283 li
47.6055 193.666 li
47.5416 193.794 li
47.3498 194.498 li
47.2858 194.945 li
cp
46.7103 191.876 mo
46.9022 191.364 li
47.1579 190.661 li
47.2219 190.533 li
48.5007 191.173 li
48.4368 191.236 li
48.181 191.812 li
47.9892 192.387 li
cp
47.9253 189.254 mo
48.245 188.807 li
48.6286 188.231 li
48.7565 188.103 li
49.8436 188.935 li
49.7796 188.998 li
49.396 189.51 li
49.0762 190.022 li
cp
49.7157 186.952 mo
50.0354 186.633 li
50.5469 186.185 li
50.8027 185.993 li
51.634 187.08 li
51.4421 187.208 li
50.9945 187.592 li
50.6748 187.911 li
cp
51.9537 185.162 mo
52.2095 184.97 li
52.8489 184.65 li
53.2965 184.458 li
53.808 185.737 li
53.4883 185.865 li
52.9768 186.185 li
52.6571 186.313 li
cp
54.6393 183.947 mo
54.8311 183.947 li
55.5345 183.755 li
56.11 183.691 li
56.3018 185.034 li
55.8542 185.098 li
55.2148 185.226 li
55.0229 185.29 li
cp
57.5807 183.563 mo
58.2841 183.563 li
58.9874 183.627 li
59.0514 183.627 li
58.8595 185.034 li
58.2201 184.97 li
57.5807 184.97 li
cp
60.4581 183.947 mo
61.0336 184.075 li
61.673 184.267 li
61.8649 184.331 li
61.3533 185.609 li
61.2894 185.609 li
60.6499 185.418 li
60.1384 185.226 li
cp
63.2077 184.906 mo
63.6553 185.162 li
64.2947 185.546 li
64.4865 185.609 li
63.7192 186.76 li
63.6553 186.76 li
63.0159 186.377 li
62.5682 186.185 li
cp
65.6375 186.441 mo
66.1491 186.824 li
66.7245 187.336 li
66.7885 187.336 li
65.8293 188.359 li
65.3178 187.911 li
64.8063 187.528 li
cp
67.8116 188.359 mo
68.3871 188.998 li
68.7068 189.382 li
67.6837 190.277 li
67.364 189.894 li
66.7885 189.318 li
cp
69.602 190.533 mo
69.8578 190.917 li
70.3054 191.556 li
70.4333 191.748 li
69.2183 192.451 li
69.1544 192.324 li
68.7068 191.684 li
68.515 191.364 li
cp
71.0727 192.963 mo
71.1366 193.027 li
71.5203 193.794 li
71.7121 194.242 li
70.4333 194.817 li
70.2414 194.434 li
69.9217 193.666 li
69.8578 193.602 li
cp
72.2237 195.585 mo
72.4794 196.224 li
71.2006 196.672 li
70.9448 196.032 li
cp
72.4794 196.224 mo
72.6713 196.927 li
71.3924 197.311 li
71.1366 196.672 li
cp
73.0549 198.334 mo
73.1189 198.782 li
73.3107 199.613 li
73.3107 199.741 li
71.9679 199.933 li
71.9679 199.869 li
71.7761 199.038 li
71.7121 198.654 li
cp
73.5025 201.148 mo
73.5025 201.276 li
73.5665 202.043 li
73.5665 202.554 li
72.2237 202.618 li
72.1597 202.171 li
72.1597 201.403 li
72.0958 201.276 li
cp
73.5665 204.025 mo
73.5025 204.473 li
73.4386 205.304 li
73.4386 205.432 li
72.0318 205.24 li
72.0958 205.112 li
72.1597 204.409 li
72.1597 203.897 li
cp
73.1828 206.839 mo
72.991 207.542 li
72.8631 208.245 li
71.5203 207.862 li
71.6482 207.222 li
71.84 206.519 li
cp
72.3515 209.588 mo
72.3515 209.716 li
72.0318 210.355 li
71.7761 210.931 li
70.4972 210.292 li
70.753 209.78 li
71.0087 209.204 li
71.0727 209.077 li
cp
71.0087 212.146 mo
71.0087 212.274 li
70.5611 212.849 li
70.1775 213.361 li
69.0905 212.466 li
69.4741 212.018 li
69.7938 211.506 li
69.8578 211.443 li
cp
69.1544 214.448 mo
68.7068 214.895 li
68.1313 215.279 li
68.0034 215.343 li
67.2361 214.256 li
67.3 214.192 li
67.7476 213.808 li
68.2592 213.425 li
cp
66.7885 216.174 mo
66.3409 216.366 li
65.7015 216.686 li
65.4457 216.75 li
64.9981 215.471 li
65.126 215.407 li
65.7015 215.151 li
66.1491 214.959 li
f
76.1882 92.0616 mo
75.6766 92.0616 li
75.229 91.9977 li
70.2926 90.8745 70.169 84.1018 75.1651 82.8539 cv
75.6127 82.7899 li
76.0603 82.7899 li
81.4027 82.8187 82.6038 90.0698 77.531 91.8699 cv
77.0834 91.9977 li
76.6358 92.0616 li
cp
76.38 90.527 mo
77.0194 90.3992 li
80.1889 89.3953 79.8329 84.7018 76.4439 84.3245 cv
75.8684 84.3245 li
72.3185 84.7189 71.985 89.6734 75.4848 90.4631 cv
75.7405 90.527 li
76.0603 90.527 li
0 0 0 1 cmyk
f
88.0816 95.7053 mo
87.57 95.7053 li
87.1224 95.6414 li
82.1743 94.5384 82.0912 87.6133 87.0585 86.4976 cv
87.9537 86.3696 li
93.3398 86.5039 94.4546 93.6933 89.4244 95.5135 cv
88.9768 95.6414 li
88.5292 95.7053 li
cp
88.2734 94.1707 mo
88.9128 94.0428 li
92.0802 92.9771 91.7477 88.3924 88.3374 87.9682 cv
87.7619 87.9682 li
84.3089 88.2751 83.7921 93.2233 87.3782 94.1068 cv
87.634 94.1707 li
87.9537 94.1707 li
f
29.126 68.7852 mo
28.6144 68.7213 li
28.1668 68.6573 li
23.2208 67.7121 23.1793 60.5792 28.1029 59.5775 cv
28.5505 59.4495 li
28.9981 59.4495 li
34.3491 59.4304 35.5171 66.8787 30.4688 68.5295 cv
30.0212 68.6573 li
29.5736 68.7213 li
cp
29.3178 67.1866 mo
29.6375 67.1866 li
29.9572 67.0588 li
33.1171 66.04 32.8016 61.5543 29.4457 60.9842 cv
28.8063 60.9842 li
25.2574 61.4286 24.9324 66.349 28.4226 67.1227 cv
28.6784 67.1866 li
28.9981 67.1866 li
f
80.2805 76.5223 mo
79.8329 76.5223 li
79.3214 76.4584 li
74.418 75.2616 74.3263 68.5476 79.2574 67.3146 cv
79.769 67.2506 li
80.2166 67.1866 li
85.5537 67.3902 86.6993 74.4901 81.6873 76.3306 cv
81.2397 76.4584 li
80.7921 76.5223 li
cp
80.5363 74.9877 mo
80.856 74.9238 li
81.1118 74.8599 li
84.4006 73.8207 83.953 69.2606 80.6002 68.7852 cv
79.9608 68.7852 li
76.4269 69.2552 76.1487 73.9966 79.5771 74.9238 cv
79.8969 74.9877 li
80.2166 74.9877 li
f
88.5931 83.8129 mo
88.0816 83.749 li
87.634 83.6851 li
82.6794 82.7419 82.6635 75.6101 87.57 74.6052 cv
88.0176 74.4772 li
88.4652 74.4772 li
93.861 74.4815 94.9523 81.9522 89.9359 83.5572 cv
89.4883 83.6851 li
89.0407 83.749 li
cp
88.7849 82.2144 mo
89.1047 82.2144 li
89.4244 82.0865 li
92.4873 81.1614 92.3775 76.6364 88.9128 76.0119 cv
88.2734 76.0119 li
84.7203 76.4595 84.4059 81.3661 87.8897 82.1505 cv
88.1455 82.2144 li
88.4652 82.2144 li
f
41.531 37.6459 mo
41.0194 37.6459 li
40.5718 37.582 li
35.5992 36.447 35.5714 29.6648 40.5079 28.4382 cv
40.9555 28.3742 li
41.4031 28.3742 li
46.7647 28.4105 47.9487 35.6893 42.8738 37.4542 cv
42.4262 37.582 li
41.9786 37.6459 li
cp
41.7228 36.1113 mo
42.3622 35.9835 li
45.537 34.9614 45.1992 30.4161 41.8507 29.9088 cv
41.2112 29.9088 li
37.6848 30.3074 37.3512 35.2694 40.8276 36.0474 cv
41.1473 36.1113 li
41.4031 36.1113 li
f
36.8631 80.1671 mo
36.3515 80.1671 li
35.9039 80.1032 li
30.9739 78.9395 30.9281 72.1157 35.84 70.9594 cv
36.2876 70.8954 li
36.7991 70.8314 li
42.1171 71.0584 43.2809 78.025 38.2698 79.9753 cv
37.8222 80.0392 li
37.3107 80.1671 li
cp
37.1189 78.6325 mo
37.4386 78.5685 li
37.6944 78.5046 li
40.9256 77.4293 40.5462 72.8925 37.1828 72.43 cv
36.8631 72.3661 li
36.5434 72.43 li
32.9967 72.7135 32.7398 77.7458 36.1597 78.5685 cv
36.4794 78.5685 li
36.7991 78.6325 li
f
52.9129 25.7515 mo
52.4013 25.7515 li
51.9537 25.6876 li
46.9011 24.4684 47.0471 17.6232 51.8898 16.5437 cv
52.785 16.4158 li
58.2127 16.5842 59.2624 23.6872 54.2557 25.5597 cv
53.8081 25.6236 li
53.3605 25.7515 li
cp
53.1047 24.2169 mo
53.7441 24.089 li
56.8891 23.0062 56.6173 18.527 53.2326 18.0143 cv
52.9129 17.9504 li
52.5931 18.0143 li
49.1604 18.267 48.6297 23.2577 52.2095 24.1529 cv
52.4652 24.1529 li
52.785 24.2169 li
f
29.6375 37.646 mo
29.126 37.646 li
28.6784 37.5821 li
23.7057 36.4471 23.678 29.6649 28.6144 28.4382 cv
29.062 28.3743 li
29.5096 28.3743 li
34.8713 28.4105 36.0553 35.6894 30.9803 37.4542 cv
30.5327 37.5821 li
30.0851 37.646 li
cp
29.8293 36.1114 mo
30.4688 35.9835 li
33.6436 34.9615 33.3057 30.4162 29.9572 29.9089 cv
29.3178 29.9089 li
25.7913 30.3075 25.4578 35.2695 28.9341 36.0474 cv
29.2539 36.1114 li
29.5096 36.1114 li
f
48.7565 76.5224 mo
48.245 76.5224 li
47.7974 76.4585 li
42.8546 75.3469 42.8322 68.4763 47.7334 67.3146 cv
48.181 67.2507 li
48.6926 67.1867 li
54.0222 67.4926 55.1892 74.3995 50.1633 76.3306 cv
49.7157 76.4585 li
49.2041 76.5224 li
cp
49.0123 74.9878 mo
49.332 74.9238 li
49.5878 74.8599 li
52.818 73.8347 52.4237 69.2478 49.0762 68.7853 cv
48.4368 68.7853 li
44.9146 69.1892 44.5832 74.0372 48.0531 74.9238 cv
48.3729 74.9878 li
48.6926 74.9878 li
f
99.3995 60.9842 mo
98.9519 60.9842 li
98.5043 60.9203 li
93.5679 59.8215 93.4485 52.8986 98.4404 51.7764 cv
99.3356 51.6485 li
104.742 51.8222 105.829 58.9178 100.806 60.7924 cv
100.359 60.9203 li
99.9111 60.9842 li
cp
99.6553 59.4496 mo
100.295 59.3217 li
103.498 58.2283 103.082 53.6851 99.7192 53.2471 cv
99.1437 53.2471 li
95.6716 53.5604 95.1889 58.3998 98.6961 59.3856 cv
99.0159 59.4496 li
99.3356 59.4496 li
f
57.0052 37.646 mo
56.5576 37.646 li
56.11 37.5821 li
51.1587 36.429 51.018 29.7714 55.9821 28.4382 cv
56.4937 28.3743 li
56.9413 28.3743 li
62.2358 28.3998 63.4763 35.6126 58.412 37.4542 cv
57.9644 37.5821 li
57.5168 37.646 li
cp
57.261 36.1114 mo
57.9004 35.9835 li
61.1125 34.8741 60.666 30.4162 57.3249 29.9089 cv
56.6855 29.9089 li
53.1889 30.3799 52.867 35.1608 56.3018 36.0474 cv
56.6216 36.1114 li
56.9413 36.1114 li
f
64.8063 29.9089 mo
64.2947 29.9089 li
63.8471 29.781 li
58.8841 28.8517 58.8851 21.7156 63.7832 20.7011 cv
64.2308 20.5732 li
64.6784 20.5732 li
70.0784 20.6126 71.1622 28.0407 66.1491 29.6531 cv
65.7015 29.781 li
65.2539 29.845 li
cp
64.9981 28.3103 mo
65.3178 28.3103 li
65.6375 28.2464 li
68.8336 27.1434 68.4286 22.5469 65.126 22.1718 cv
64.8063 22.1078 li
64.4866 22.1078 li
60.9505 22.5491 60.6063 27.5015 64.1029 28.2464 cv
64.3587 28.3103 li
64.6784 28.3743 li
f
107.201 72.366 mo
106.689 72.366 li
106.241 72.3021 li
101.249 71.1703 101.283 64.3828 106.177 63.1583 cv
106.625 63.0943 li
107.137 63.0943 li
112.448 63.1902 113.603 70.436 108.543 72.1743 cv
108.096 72.3021 li
107.648 72.366 li
cp
107.392 70.8314 mo
108.032 70.7036 li
111.247 69.7178 110.841 65.1117 107.52 64.6289 cv
106.881 64.6289 li
103.339 65.0755 103.046 69.9298 106.497 70.7675 cv
106.817 70.8314 li
107.137 70.8314 li
f
41.0194 64.6289 mo
40.5079 64.6289 li
40.0603 64.501 li
35.1111 63.5611 35.0706 56.4559 39.9963 55.4211 cv
40.4439 55.2932 li
40.8915 55.2932 li
46.251 55.3508 47.4105 62.6862 42.3622 64.3732 cv
41.9146 64.501 li
41.467 64.565 li
cp
41.2112 63.0303 mo
41.531 63.0303 li
41.8507 62.9664 li
45.0276 61.8708 44.6663 57.2914 41.3391 56.8918 cv
41.0194 56.8279 li
40.6997 56.8279 li
37.1796 57.1977 36.8279 62.2811 40.316 62.9664 cv
40.5718 63.0303 li
40.8915 63.0943 li
f
99.3995 87.9681 mo
98.5043 87.8403 li
93.553 86.7831 93.4485 79.9199 98.4404 78.6964 cv
98.888 78.6324 li
99.3356 78.6324 li
104.739 78.6474 105.813 86.035 100.806 87.7124 cv
100.359 87.8403 li
99.9111 87.9042 li
cp
99.6553 86.3696 mo
100.295 86.2417 li
103.488 85.2144 103.086 80.6254 99.7192 80.1671 cv
99.1437 80.1671 li
95.5779 80.6125 95.2613 85.4083 98.6961 86.3057 cv
99.0159 86.3696 li
99.3356 86.3696 li
f
68.3871 111.245 mo
67.9395 111.245 li
67.4279 111.181 li
62.5171 109.98 62.434 103.274 67.364 102.037 cv
67.8755 101.973 li
68.3231 101.909 li
73.6603 102.112 74.8059 109.212 69.7938 111.053 cv
69.3462 111.181 li
68.8986 111.245 li
cp
68.6429 109.71 mo
69.2823 109.582 li
72.5402 108.413 71.9956 103.973 68.7068 103.507 cv
68.0674 103.507 li
64.5334 103.977 64.2553 108.719 67.6837 109.646 cv
68.0034 109.71 li
68.3231 109.71 li
f
57.0052 107.664 mo
56.11 107.536 li
51.1352 106.396 51.0425 99.7358 55.9821 98.392 cv
56.4937 98.328 li
56.9413 98.328 li
62.2794 98.3217 63.4219 105.708 58.412 107.408 cv
57.9644 107.536 li
57.5168 107.6 li
cp
57.261 106.065 mo
57.9004 105.937 li
61.1029 104.867 60.6734 100.358 57.3249 99.8627 cv
56.6855 99.8627 li
53.1707 100.376 52.866 105.112 56.3018 106.001 cv
56.6216 106.065 li
56.9413 106.065 li
f
111.293 60.9841 mo
110.845 60.9841 li
110.398 60.9202 li
105.461 59.8215 105.342 52.8986 110.334 51.7764 cv
111.229 51.6484 li
116.635 51.8221 117.722 58.9177 112.7 60.7924 cv
112.252 60.9202 li
111.805 60.9841 li
cp
111.549 59.4495 mo
112.188 59.3217 li
115.392 58.2282 114.975 53.6851 111.613 53.247 cv
111.037 53.247 li
107.565 53.5604 107.082 58.3998 110.59 59.3856 cv
110.909 59.4495 li
111.229 59.4495 li
f
73.1189 94.1706 mo
72.4794 93.4033 li
72.2236 93.0836 li
73.3107 92.2523 li
73.5025 92.5081 li
74.142 93.2755 li
cp
71.3924 91.9326 mo
71.2645 91.6769 li
70.753 90.7816 li
70.689 90.5898 li
71.9679 90.0143 li
71.9679 90.1422 li
72.4155 90.9734 li
72.5434 91.1653 li
cp
70.1135 89.3109 mo
69.9856 88.7994 li
69.7299 87.9042 li
71.0087 87.5206 li
71.2645 88.3518 li
71.4563 88.7994 li
cp
69.4102 86.4975 mo
69.2823 85.6022 li
69.2183 85.0908 li
70.6251 84.9628 li
70.6251 85.3465 li
70.753 86.3057 li
cp
69.1544 83.684 mo
69.1544 82.2133 li
70.5611 82.2772 li
70.4972 83.2364 li
70.4972 83.6201 li
cp
69.2823 80.8065 mo
69.4102 79.7195 li
69.4741 79.3998 li
70.8169 79.5916 li
70.753 79.9114 li
70.6251 80.9344 li
cp
69.7299 77.993 mo
69.8577 77.2897 li
70.0496 76.6503 li
71.3924 76.97 li
71.2006 77.5454 li
71.0727 78.3127 li
cp
70.4332 75.2435 mo
70.6251 74.7958 li
70.8808 73.9646 li
72.2236 74.4122 li
71.9039 75.1796 li
71.776 75.6911 li
cp
71.3924 72.6218 mo
71.5842 72.2382 li
71.9679 71.3429 li
73.2467 71.9185 li
72.8631 72.7497 li
72.6712 73.1333 li
cp
72.5434 70.064 mo
72.7352 69.7443 li
73.1828 68.7852 li
74.3977 69.4886 li
73.9501 70.3199 li
73.8222 70.6396 li
cp
73.8862 67.5703 mo
74.142 67.1866 li
74.6535 66.3553 li
75.8045 67.1227 li
75.2929 67.89 li
75.1011 68.2736 li
cp
75.4208 65.2043 mo
75.7405 64.6929 li
76.1881 64.0535 li
77.3391 64.8846 li
76.8915 65.4602 li
76.5718 65.9717 li
cp
77.0194 62.9025 mo
77.5949 62.2631 li
77.9146 61.8154 li
79.0016 62.7106 li
78.6819 63.0942 li
78.1064 63.7976 li
cp
78.8098 60.7284 mo
79.5771 59.8332 li
79.769 59.7053 li
80.7281 60.6644 li
80.6641 60.7284 li
79.8329 61.6875 li
cp
80.6641 58.6822 mo
80.7281 58.6822 li
81.6872 57.7231 li
82.6464 58.6822 li
81.6872 59.6414 li
cp
82.7103 56.7639 mo
83.03 56.4442 li
83.7334 55.8047 li
84.6286 56.8278 li
83.9892 57.4033 li
83.6055 57.7231 li
cp
84.8204 54.9095 mo
85.4599 54.3341 li
85.9075 54.0143 li
86.7388 55.1014 li
86.2912 55.4211 li
85.6517 55.9327 li
cp
86.9945 53.1831 mo
87.9537 52.4797 li
88.1455 52.3518 li
88.9128 53.5028 li
88.721 53.6307 li
87.8258 54.2701 li
cp
89.2965 51.5845 mo
90.4475 50.8811 li
90.5114 50.8171 li
91.2148 52.0321 li
91.1508 52.0321 li
90.0638 52.7355 li
cp
91.7263 50.1138 mo
92.9412 49.4744 li
93.5807 50.6893 li
92.4297 51.3287 li
92.3658 51.3287 li
cp
94.2201 48.835 mo
94.284 48.835 li
95.499 48.2595 li
96.0105 49.5383 li
94.9235 50.0499 li
94.7956 50.1138 li
cp
96.7778 47.7479 mo
96.8418 47.684 li
98.1207 47.2363 li
98.5682 48.5792 li
97.3533 48.9628 li
97.2894 49.0267 li
cp
99.4634 46.8527 mo
100.678 46.4691 li
100.806 46.4691 li
101.126 47.8118 li
100.998 47.8118 li
99.8471 48.1316 li
cp
102.213 46.1493 mo
103.172 45.9575 li
103.556 45.8936 li
103.748 47.3003 li
103.428 47.3003 li
102.469 47.4921 li
cp
104.963 45.7656 mo
105.602 45.7017 li
106.369 45.6378 li
106.433 47.0446 li
105.73 47.0446 li
105.09 47.1085 li
cp
107.84 45.6378 mo
107.968 45.6378 li
109.119 45.7017 li
109.247 45.7656 li
109.119 47.1085 li
108.991 47.1085 li
107.904 47.0446 li
107.776 47.0446 li
cp
110.654 45.9575 mo
111.293 46.0214 li
112.06 46.2133 li
111.741 47.556 li
111.037 47.4282 li
110.398 47.3003 li
cp
113.467 46.6609 mo
114.81 47.2363 li
114.17 48.4513 li
113.851 48.3234 li
112.955 47.9398 li
cp
116.025 47.9398 mo
116.217 48.0037 li
117.112 48.6431 li
117.24 48.771 li
116.408 49.7941 li
116.344 49.7941 li
115.513 49.2186 li
115.321 49.0907 li
cp
118.327 49.6662 mo
118.71 50.0499 li
117.751 51.009 li
117.368 50.6893 li
cp
118.71 50.0499 mo
119.35 50.7532 li
118.327 51.6484 li
117.687 51.009 li
cp
120.245 51.9042 mo
120.629 52.5436 li
120.948 53.1831 li
119.733 53.8225 li
119.478 53.311 li
119.03 52.6716 li
cp
121.588 54.5259 mo
121.908 55.485 li
122.035 55.8687 li
120.693 56.2524 li
120.629 55.9327 li
120.309 54.9735 li
cp
122.355 57.2754 mo
122.419 57.5952 li
122.611 58.6182 li
121.268 58.874 li
121.076 57.851 li
121.012 57.5313 li
cp
122.739 60.0889 mo
122.739 61.5596 li
121.332 61.4957 li
121.396 60.9841 li
121.332 60.1529 li
cp
122.675 62.9664 mo
122.611 63.2861 li
122.483 64.3732 li
121.14 64.1813 li
121.268 63.2222 li
121.268 62.8385 li
cp
122.227 65.7799 mo
121.971 66.9948 li
121.971 67.1227 li
120.629 66.803 li
120.629 66.675 li
120.884 65.4602 li
cp
121.588 68.5294 mo
121.268 69.4886 li
121.14 69.8723 li
119.861 69.3607 li
119.925 69.041 li
120.245 68.0818 li
cp
120.629 71.1511 mo
120.309 71.9824 li
120.117 72.4939 li
118.838 71.9185 li
119.03 71.4708 li
119.35 70.6396 li
cp
119.542 73.7728 mo
119.158 74.5401 li
118.902 74.9877 li
117.687 74.3483 li
117.879 73.9007 li
118.263 73.1333 li
cp
118.199 76.2665 mo
117.751 77.0339 li
117.495 77.4815 li
116.344 76.7142 li
116.536 76.3944 li
117.048 75.5632 li
cp
116.728 78.6324 mo
116.153 79.5276 li
115.961 79.7834 li
114.874 79.0161 li
115.002 78.7604 li
115.577 77.8651 li
cp
115.13 80.9344 mo
114.298 82.0215 li
113.211 81.1902 li
114.042 80.1031 li
cp
113.403 83.1085 mo
113.339 83.2364 li
112.508 84.1955 li
111.421 83.2364 li
112.252 82.3412 li
112.316 82.2133 li
cp
111.549 85.2186 mo
111.165 85.5383 li
110.526 86.1777 li
109.566 85.2186 li
110.526 84.2595 li
cp
109.566 87.2009 mo
108.863 87.8403 li
108.479 88.0961 li
107.584 87.0729 li
107.904 86.8172 li
108.607 86.1777 li
cp
107.456 89.0552 mo
106.433 89.8865 li
106.369 89.9504 li
105.538 88.8633 li
105.538 88.7994 li
106.561 87.9682 li
cp
105.282 90.7816 mo
105.218 90.8456 li
104.131 91.6129 li
103.364 90.4619 li
104.387 89.7586 li
104.451 89.6946 li
cp
102.98 92.3802 mo
102.725 92.572 li
101.829 93.1476 li
101.062 91.9966 li
101.957 91.4211 li
102.213 91.2293 li
cp
100.614 93.8509 mo
100.167 94.1067 li
99.3356 94.5543 li
98.6962 93.3394 li
99.4634 92.8918 li
99.9111 92.636 li
cp
98.1207 95.1937 mo
97.6091 95.4495 li
96.8418 95.7692 li
96.2663 94.4904 li
96.9697 94.1706 li
97.4812 93.9149 li
cp
95.5629 96.3447 mo
95.0514 96.5366 li
94.2201 96.7923 li
93.7725 95.5134 li
94.4759 95.2577 li
95.0514 95.0659 li
cp
92.8773 97.2399 mo
92.4936 97.3678 li
91.5345 97.6236 li
91.2148 96.3447 li
92.046 96.089 li
92.4936 95.9611 li
cp
90.1917 98.0073 mo
89.9359 98.0712 li
88.7849 98.263 li
88.5292 96.9202 li
89.6162 96.6644 li
89.872 96.6644 li
cp
87.3782 98.4548 mo
86.2912 98.5827 li
85.9715 98.5827 li
85.9075 97.176 li
86.1633 97.176 li
87.2503 97.0481 li
cp
84.5647 98.5827 mo
83.9252 98.5827 li
83.1579 98.5188 li
83.2219 97.176 li
83.9252 97.2399 li
84.5647 97.2399 li
cp
81.7512 98.3909 mo
81.6872 98.3909 li
80.6002 98.1991 li
80.2805 98.1351 li
80.6002 96.7923 li
80.856 96.8563 li
81.8151 96.9841 li
81.879 97.0481 li
cp
78.9377 97.7515 mo
78.4901 97.6236 li
77.5949 97.2399 li
78.1064 95.9611 li
78.9377 96.2808 li
79.3213 96.4087 li
cp
76.2521 96.6005 mo
75.6127 96.2169 li
75.0372 95.8332 li
75.8045 94.6822 li
76.316 95.0019 li
76.9555 95.3856 li
cp
73.8862 94.874 mo
73.1828 94.2346 li
74.142 93.2115 li
74.8453 93.9149 li
.834104 .639216 .287846 .000335698 cmyk
f
65.3178 41.993 mo
64.0389 42.3766 li
63.9111 42.3766 li
63.7192 41.0339 li
64.2947 40.9059 li
64.9342 40.7142 li
cp
62.4404 42.5685 mo
61.2894 42.5685 li
61.0336 42.5046 li
61.1615 41.1617 li
62.4404 41.1617 li
cp
59.5629 42.3127 mo
59.1793 42.2488 li
58.5398 42.0569 li
58.1562 41.929 li
58.6038 40.6502 li
58.8595 40.7142 li
59.499 40.9059 li
59.8187 40.9699 li
cp
56.8134 41.4175 mo
56.4937 41.2896 li
55.8542 40.9699 li
55.5345 40.7781 li
56.174 39.5632 li
56.4937 39.755 li
57.0692 40.0107 li
57.3889 40.1386 li
cp
54.3196 40.0107 mo
53.9999 39.755 li
53.4244 39.3074 li
53.1686 39.1156 li
54.0638 38.0285 li
54.2556 38.2203 li
54.7672 38.6679 li
55.0869 38.8598 li
cp
52.0816 38.1564 mo
51.6979 37.7088 li
51.1864 37.1333 li
51.1224 37.0693 li
52.1455 36.1742 li
52.2095 36.2381 li
52.6571 36.7496 li
53.0407 37.1333 li
cp
50.2272 35.9824 mo
50.1633 35.9184 li
49.7157 35.215 li
49.396 34.8314 li
50.547 34.0641 li
50.8027 34.4477 li
51.2503 35.0871 li
51.3143 35.1511 li
cp
48.6926 33.5525 mo
48.4368 33.1049 li
48.0531 32.3375 li
47.9892 32.2736 li
49.2681 31.6981 li
49.6517 32.4655 li
49.9075 32.9131 li
cp
47.4777 30.9948 mo
47.3498 30.739 li
47.094 29.9077 li
48.3729 29.4601 li
48.6286 30.2274 li
48.7565 30.4832 li
cp
47.0301 29.8438 mo
46.9661 29.652 li
48.3089 29.2683 li
48.3729 29.4601 li
cp
46.5825 28.3091 mo
46.5825 28.2452 li
46.3906 27.35 li
46.3267 26.9024 li
47.6695 26.6467 li
47.7334 27.0942 li
47.9253 27.8616 li
47.9253 27.9255 li
cp
46.0709 25.4957 mo
46.007 24.8563 li
46.007 24.0889 li
47.3498 23.961 li
47.4137 24.7283 li
47.4777 25.3038 li
cp
45.943 22.6182 mo
45.943 22.4264 li
46.007 21.6591 li
46.0709 21.2114 li
47.4137 21.3394 li
47.4137 21.723 li
47.3498 22.4264 li
47.3498 22.6821 li
cp
46.2628 19.7408 mo
46.3267 19.2932 li
46.5185 18.5898 li
46.5825 18.334 li
47.9253 18.7177 li
47.8613 18.9095 li
47.7334 19.5489 li
47.6055 19.9966 li
cp
47.0301 16.9912 mo
47.2219 16.4157 li
47.5416 15.7763 li
47.5416 15.6484 li
48.8205 16.2878 li
48.7565 16.2878 li
48.5007 16.9273 li
48.3089 17.5027 li
cp
48.245 14.3695 mo
48.5647 13.858 li
48.9484 13.2825 li
49.0762 13.1546 li
50.1633 14.0498 li
50.0993 14.1138 li
49.7157 14.6253 li
49.396 15.0729 li
cp
50.0354 12.0676 mo
50.8667 11.2363 li
51.1224 11.0445 li
51.9537 12.1315 li
51.7619 12.3234 li
51.3143 12.707 li
50.9946 13.0267 li
cp
52.2734 10.2133 mo
52.5931 10.0854 li
53.1686 9.76563 li
53.6162 9.57379 li
54.1278 10.7888 li
53.808 10.9805 li
53.2965 11.2363 li
53.0407 11.4282 li
cp
54.959 9.06226 mo
55.1508 8.99835 li
55.8542 8.87042 li
56.4297 8.74255 li
56.6216 10.1493 li
56.174 10.2133 li
55.5345 10.3411 li
55.3427 10.4051 li
cp
57.9004 8.67865 mo
58.6038 8.67865 li
59.3071 8.74255 li
59.3711 8.74255 li
59.1793 10.0854 li
58.6038 10.0214 li
57.9004 10.0214 li
cp
60.7778 8.99835 mo
61.3533 9.19012 li
62.0567 9.38196 li
62.1846 9.44592 li
61.673 10.7248 li
61.6091 10.7248 li
60.9697 10.4691 li
60.4581 10.3411 li
cp
63.5274 10.0214 mo
63.975 10.2772 li
64.6144 10.5969 li
64.8063 10.7248 li
64.0389 11.8758 li
63.975 11.8118 li
63.3995 11.4921 li
62.888 11.2363 li
cp
65.9572 11.556 mo
66.4688 11.9397 li
67.0443 12.3873 li
67.1082 12.4512 li
66.1491 13.4744 li
65.6375 13.0267 li
65.126 12.6431 li
cp
68.1313 13.4104 mo
68.1953 13.4744 li
68.7068 14.0498 li
69.0904 14.4974 li
68.0034 15.3926 li
67.6837 15.009 li
67.1722 14.4335 li
67.1082 14.3695 li
cp
69.9217 15.6484 mo
70.1775 15.9681 li
70.6251 16.6715 li
70.753 16.7994 li
69.538 17.5667 li
69.4741 17.4388 li
69.0904 16.7994 li
68.8347 16.4157 li
cp
71.4563 18.0783 mo
71.4563 18.1422 li
71.84 18.9095 li
72.0318 19.3571 li
70.8169 19.9326 li
70.6251 19.485 li
70.2414 18.7816 li
70.2414 18.7177 li
cp
72.6073 20.6999 mo
72.7991 21.3394 li
71.5203 21.787 li
71.2645 21.1475 li
cp
72.7991 21.3394 mo
73.0549 22.0427 li
71.7121 22.4264 li
71.5203 21.723 li
cp
73.3746 23.3856 mo
73.5025 23.8331 li
73.6304 24.6644 li
73.6304 24.7923 li
72.2876 24.9841 li
72.2876 24.9202 li
72.1597 24.1528 li
72.0318 23.7053 li
cp
73.8223 26.199 mo
73.8223 26.327 li
73.8862 27.1581 li
73.8862 27.6697 li
72.5434 27.6697 li
72.5434 27.2221 li
72.4794 26.4548 li
72.4794 26.327 li
cp
73.8862 29.0765 mo
73.8223 29.588 li
73.7583 30.3553 li
73.7583 30.5471 li
72.4155 30.3553 li
72.4155 30.2274 li
72.4794 29.5241 li
72.4794 29.0125 li
cp
73.5025 31.9539 mo
73.3746 32.6573 li
73.1828 33.2967 li
71.84 32.9131 li
72.0318 32.3375 li
72.1597 31.6342 li
cp
72.6713 34.7035 mo
72.6713 34.7674 li
72.3515 35.4708 li
72.0958 35.9824 li
70.8808 35.4068 li
71.0727 34.8953 li
71.3924 34.3198 li
71.3924 34.192 li
cp
71.3924 37.2612 mo
71.3285 37.3252 li
70.8808 37.9006 li
70.4972 38.4122 li
69.4102 37.5809 li
69.7938 37.1333 li
70.1775 36.6218 li
70.1775 36.4939 li
cp
69.538 39.4992 mo
69.0265 39.9468 li
68.451 40.3944 li
68.3871 40.4584 li
67.5558 39.3074 li
67.6198 39.3074 li
68.515 38.54 li
cp
67.1082 41.2257 mo
66.6606 41.4814 li
66.0212 41.7372 li
65.8294 41.8651 li
65.3178 40.5862 li
65.5096 40.5223 li
66.0212 40.2665 li
66.4688 40.0107 li
f
74.2699 114.696 mo
73.8862 114.824 li
73.5025 115.016 li
73.0549 115.144 li
72.6713 115.272 li
72.2876 113.737 li
72.5434 113.673 li
72.927 113.545 li
73.2468 113.418 li
73.6304 113.29 li
cp
71.1366 115.592 mo
70.9448 115.656 li
70.3693 115.72 li
69.7299 115.783 li
69.5381 115.847 li
69.3462 114.313 li
69.5381 114.249 li
70.689 114.121 li
70.8169 114.057 li
cp
67.8755 115.911 mo
67.0443 115.975 li
66.3409 115.911 li
66.3409 114.377 li
67.8755 114.377 li
cp
64.6784 115.847 mo
63.975 115.72 li
63.2077 115.592 li
63.0798 115.592 li
63.3995 114.057 li
64.1668 114.185 li
64.8702 114.313 li
cp
61.5452 115.272 mo
60.7139 115.08 li
60.0105 114.888 li
60.4581 113.354 li
61.0976 113.545 li
61.8649 113.801 li
61.9288 113.801 li
cp
58.4759 114.313 mo
58.2201 114.185 li
57.3249 113.801 li
57.0052 113.673 li
57.7086 112.267 li
58.7317 112.778 li
59.0514 112.842 li
cp
55.5984 112.906 mo
54.7672 112.458 li
54.2556 112.075 li
55.0869 110.796 li
55.5984 111.116 li
56.3658 111.563 li
cp
52.9128 111.18 mo
52.2734 110.668 li
51.6979 110.156 li
52.721 108.942 li
53.2326 109.453 li
53.872 109.901 li
cp
50.483 109.069 mo
49.8436 108.43 li
49.396 107.918 li
50.483 106.895 li
51.57 107.982 li
cp
48.3089 106.831 mo
48.1171 106.576 li
47.2858 105.617 li
48.4368 104.593 li
49.2681 105.553 li
49.4599 105.744 li
cp
46.2627 104.466 mo
45.3675 103.378 li
45.2397 103.251 li
46.4546 102.291 li
46.5185 102.419 li
47.4137 103.442 li
cp
44.2805 102.036 mo
43.3853 101.013 li
43.2574 100.821 li
44.4723 99.8616 li
44.6002 99.9895 li
45.4315 101.077 li
cp
42.2983 99.6058 mo
41.4031 98.3909 li
41.3391 98.327 li
42.618 97.4318 li
43.5771 98.6467 li
cp
40.4439 97.1121 mo
40.38 97.0481 li
39.5487 95.8332 li
40.7636 94.938 li
41.6588 96.1529 li
cp
38.5896 94.5543 mo
38.3977 94.2346 li
37.6944 93.2755 li
38.9732 92.3802 li
39.6127 93.3394 li
39.8684 93.6591 li
cp
36.7992 91.9966 mo
36.3515 91.2932 li
35.9679 90.7178 li
37.2468 89.8226 li
37.6304 90.462 li
38.078 91.1014 li
cp
35.0727 89.3749 mo
34.2414 88.0961 li
35.5203 87.2648 li
36.4155 88.5437 li
cp
33.4102 86.7533 mo
32.5789 85.4744 li
33.8578 84.6431 li
34.689 85.986 li
cp
31.7477 84.1316 mo
31.4919 83.7479 li
30.9803 82.7888 li
32.3231 82.0215 li
32.8347 82.9167 li
33.0905 83.3004 li
cp
30.1491 81.446 mo
29.7015 80.6147 li
29.3817 80.0392 li
30.7885 79.3359 li
31.0443 79.8474 li
31.5558 80.6786 li
cp
28.6784 78.6964 mo
28.0389 77.6094 li
27.9111 77.2897 li
29.3178 76.5863 li
29.4457 76.8421 li
30.0212 77.9291 li
cp
27.2077 75.9469 mo
26.5043 74.5401 li
27.9111 73.8367 li
27.9111 73.9007 li
28.6144 75.2435 li
cp
25.8649 73.1334 mo
25.8009 73.0695 li
25.2254 71.6627 li
26.6322 71.0233 li
27.2077 72.43 li
27.2716 72.43 li
cp
24.586 70.2559 mo
24.586 70.192 li
24.0105 68.7852 li
24.0105 68.7213 li
25.4812 68.2098 li
25.9928 69.6165 li
cp
23.435 67.2506 mo
23.0514 66.0996 li
22.9874 65.7799 li
24.4581 65.3323 li
24.5221 65.5881 li
24.9057 66.803 li
cp
22.5398 64.2453 mo
22.348 63.414 li
22.1562 62.7106 li
23.6908 62.3909 li
23.8187 62.9664 li
24.0745 63.8616 li
cp
21.8365 61.176 mo
21.7086 60.6005 li
21.5167 59.6414 li
23.0514 59.3856 li
23.2432 60.2808 li
23.3711 60.8563 li
cp
21.3249 58.0428 mo
21.261 57.7231 li
21.0691 56.5082 li
22.6038 56.3163 li
22.7956 57.4673 li
22.8595 57.851 li
cp
20.9413 54.9735 mo
20.8773 54.7817 li
20.8134 53.3749 li
22.348 53.2471 li
22.4759 54.5898 li
22.4759 54.7817 li
cp
20.6855 51.8403 mo
20.6855 51.7764 li
20.6215 50.3057 li
20.6215 50.2417 li
22.1562 50.1778 li
22.1562 50.2417 li
22.2201 51.7124 li
cp
20.5576 48.6431 mo
20.5576 47.1085 li
22.1562 47.1085 li
22.0922 47.3643 li
22.1562 48.6431 li
cp
20.6215 45.5099 mo
20.6215 44.4868 li
20.6855 43.9753 li
22.2201 44.0392 li
22.1562 44.5508 li
22.1562 45.5739 li
cp
20.7494 42.3767 mo
20.8134 41.6733 li
20.8773 40.842 li
22.4119 40.97 li
22.348 41.7373 li
22.2841 42.5046 li
cp
21.0052 39.2435 mo
21.0691 38.9238 li
21.197 37.7089 li
22.7317 37.9007 li
22.6038 39.1156 li
22.5398 39.4353 li
cp
21.4528 36.1103 mo
21.5807 35.0872 li
21.7086 34.5756 li
23.2432 34.8954 li
23.1153 35.343 li
22.9235 36.366 li
cp
22.0283 33.041 mo
22.0283 32.7852 li
22.348 31.6982 li
22.348 31.5063 li
23.8826 31.89 li
23.8187 32.0179 li
23.5629 33.105 li
23.499 33.3607 li
cp
22.7956 29.9717 mo
22.9235 29.652 li
23.1793 28.6929 li
23.3071 28.4371 li
24.7778 29.0126 li
24.6499 29.2044 li
24.3942 30.0996 li
24.2663 30.4193 li
cp
23.9466 26.9664 mo
24.2663 26.263 li
24.6499 25.6236 li
24.7139 25.4957 li
25.9928 26.3909 li
25.6091 26.9664 li
25.2894 27.6698 li
cp
25.8649 24.1529 mo
26.1207 23.9611 li
26.7601 23.5135 li
27.2716 23.1937 li
28.0389 24.5366 li
27.6553 24.7284 li
26.888 25.3039 li
cp
28.8063 22.4904 mo
30.3409 22.1068 li
30.4688 22.1068 li
30.6606 23.6414 li
29.9572 23.7692 li
29.3178 23.9611 li
cp
32.0674 21.9149 mo
33.7299 21.9149 li
33.602 23.4495 li
32.1313 23.4495 li
cp
35.2645 22.0428 mo
35.3285 22.0428 li
36.2237 22.1707 li
36.8631 22.2986 li
36.6073 23.8332 li
35.9679 23.7053 li
35.2006 23.5774 li
35.1366 23.5774 li
cp
38.4617 22.6822 mo
38.7814 22.7462 li
39.6127 23.002 li
39.9963 23.1298 li
39.4848 24.6005 li
39.1651 24.4726 li
38.3977 24.2169 li
38.0141 24.1529 li
cp
41.467 23.7053 mo
42.0425 23.9611 li
42.8738 24.2808 li
42.9377 24.3447 li
42.2343 25.7515 li
42.1704 25.6876 li
41.467 25.3678 li
40.8915 25.1121 li
cp
44.3445 25.1121 mo
45.6233 26.0073 li
45.6873 26.0712 li
44.7281 27.2861 li
44.1526 26.8385 li
43.5132 26.4548 li
cp
46.9661 27.0943 mo
47.3498 27.478 li
47.7974 27.9895 li
48.0532 28.3732 li
46.8382 29.2684 li
46.6464 29.0126 li
45.8791 28.2452 li
cp
48.8844 29.8439 mo
48.9484 29.9078 li
49.2681 30.6751 li
49.5238 31.3785 li
47.9892 31.89 li
47.7974 31.2506 li
47.5416 30.6111 li
47.5416 30.5472 li
cp
49.9075 32.9771 mo
49.9715 33.1689 li
50.0993 34.0641 li
50.2272 34.5117 li
48.6926 34.7675 li
48.5647 34.3199 li
48.4368 33.4886 li
48.3729 33.2968 li
cp
50.4191 36.1103 mo
50.483 36.9415 li
50.5469 37.7089 li
49.0123 37.8367 li
48.9484 37.1334 li
48.8844 36.3021 li
cp
50.6748 39.2435 mo
50.7388 40.0108 li
50.7388 40.842 li
49.2041 40.906 li
49.2041 40.1387 li
49.1402 39.3714 li
cp
50.8027 42.3767 mo
50.8667 43.9114 li
49.332 43.9753 li
49.2681 42.4407 li
cp
50.9306 45.5099 mo
50.9306 47.0446 li
49.396 47.1085 li
49.396 46.4691 li
49.332 45.5099 li
cp
50.9945 48.5792 mo
51.0585 50.1138 li
49.5238 50.1778 li
49.4599 48.6431 li
cp
51.1224 51.6485 mo
51.1864 52.6076 li
51.2503 53.1831 li
49.7157 53.3749 li
49.6517 52.6716 li
49.5878 51.7764 li
cp
51.3782 54.7178 mo
51.5061 55.2932 li
51.634 56.1884 li
50.0993 56.5082 li
50.0993 56.3802 li
49.9715 55.549 li
49.8436 54.9095 li
cp
51.9537 57.6591 mo
52.1455 58.4265 li
52.3374 59.1298 li
50.8667 59.5774 li
50.6109 58.8101 li
50.4191 58.1068 li
cp
52.785 60.6005 mo
53.1686 61.7515 li
53.2326 62.0712 li
51.8258 62.5828 li
51.6979 62.2631 li
51.3143 61.1121 li
cp
53.808 63.5419 mo
53.9999 64.1174 li
54.3835 64.9487 li
52.9128 65.5242 li
52.5931 64.6929 li
52.3374 64.1174 li
cp
54.959 66.3554 mo
55.4706 67.3785 li
55.5984 67.6982 li
54.2556 68.4016 li
54.0638 68.0818 li
53.5523 66.9948 li
cp
56.3018 69.105 mo
56.5576 69.4886 li
57.0692 70.4478 li
55.6624 71.2151 li
54.959 69.8083 li
cp
57.7725 71.8545 mo
58.5398 73.1973 li
57.197 73.9647 li
56.9413 73.517 li
56.4297 72.5579 li
cp
59.3072 74.5401 mo
59.6269 75.1796 li
60.0745 75.8829 li
58.6677 76.6503 li
58.2841 75.8829 li
57.9644 75.3074 li
cp
60.7778 77.2258 mo
61.0976 77.7373 li
61.6091 78.5685 li
60.2663 79.3998 li
59.7548 78.5046 li
59.435 77.993 li
cp
62.4404 79.8474 mo
62.824 80.5508 li
63.2716 81.1263 li
61.9288 82.0215 li
61.5452 81.382 li
61.0976 80.6786 li
cp
64.1029 82.4052 mo
64.8702 83.4922 li
64.9981 83.684 li
63.7192 84.5792 li
63.5914 84.3874 li
62.824 83.3004 li
cp
65.8933 84.9629 mo
65.8933 85.0268 li
66.7246 86.2417 li
65.5096 87.1369 li
64.6144 85.922 li
64.6144 85.8581 li
cp
67.6198 87.5206 mo
68.0674 88.0961 li
68.515 88.7994 li
67.2361 89.6946 li
66.7885 88.9913 li
66.3409 88.4158 li
cp
69.4102 90.0783 mo
70.1136 91.1653 li
70.3054 91.4211 li
68.9626 92.2524 li
68.8347 91.9966 li
68.1313 90.9735 li
cp
71.1366 92.7 mo
71.9679 94.0428 li
70.689 94.8741 li
69.8578 93.5313 li
cp
72.7992 95.3856 mo
72.8631 95.5135 li
73.2468 96.2169 li
73.5665 96.7284 li
72.2237 97.4957 li
71.904 96.9842 li
71.5203 96.2808 li
71.4564 96.1529 li
cp
74.2699 98.1991 mo
74.5256 98.7746 li
74.7814 99.414 li
74.9093 99.6698 li
73.4386 100.245 li
73.3746 99.9895 li
72.8631 98.8386 li
cp
75.4208 101.141 mo
75.6766 101.78 li
75.9324 102.675 li
74.4617 103.123 li
74.2059 102.291 li
73.9501 101.652 li
cp
76.316 104.21 mo
76.5718 105.297 li
76.6358 105.808 li
75.1011 106.064 li
75.0372 105.617 li
74.8454 104.529 li
cp
76.8915 107.343 mo
76.8915 107.535 li
76.9555 108.622 li
76.9555 109.005 li
75.4208 109.005 li
75.4208 108.686 li
75.3569 107.727 li
75.3569 107.535 li
cp
76.8276 110.732 mo
76.6358 111.499 li
76.38 112.331 li
74.9093 111.819 li
75.1011 111.18 li
75.293 110.412 li
cp
75.293 113.929 mo
75.0372 114.121 li
74.7175 114.441 li
74.3338 114.633 li
73.5665 113.29 li
73.8223 113.162 li
74.0141 112.97 li
74.2699 112.778 li
f
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.458 li
-170.569 652.458 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wif?%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.458 li
-166.476 652.458 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wif?%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.458 li
-162.384 652.458 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.295 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wif?%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1 /1 /CSD get_res sepcs
1 sep
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
144.032 610.128 mo
(Data Set)
[-7.37518 -5.74017 -4.00922 -5.74023 -2.68433 -5.49969 -6.01672 0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.458 li
-170.569 652.458 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<F)W)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.458 li
-166.476 652.458 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<F)W)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.458 li
-162.384 652.458 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.295 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<F)W)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 7108 882 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>PBAAAA+Calibri AddT42Char 
2 7178 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 1786 87 <000200acfffa03c7050e001c00290078b12406b8ffe8b310014d06b8fff0
b30f014d06b8fff0b30d014d06b8fff6b30c014d06b8ffe8b30b014d06b8
02114017111d1810014d1d100f014d1d100c0d014c1d200b014d1db80232
b2001125b8010ab306060c23b8010bb315510c55003f3fed12392fed012f
d4e12b2b2b2b10e12b2b2b2b2b32313001140e02232311140e0223222e02
351134363321321e0407342e0223231133323e0203c74077ad7893091321
19192114082a1a01152a4d696d4c29b53b575d2c9f9b4e6746240393619c
6e3cfe2e080c070505070c0804aa282207173f5c79574f6a340efdf92847
6300>PBAAAA+Calibri AddT42Char 
2 5146 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/hyphen 882 def
/one 1005 def
/P 87 def
/o 381 def
end
PBAAAA+Calibri /Encoding get
dup 45 /hyphen put
dup 49 /one put
dup 80 /P put
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 3{/.notdef}rp /one 15{/.notdef}rp /A 
/.notdef /C /D /.notdef /F 5{/.notdef}rp /L /M 
2{/.notdef}rp /P 2{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a 
/b /.notdef /d /e /.notdef /g /.notdef /i 
2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
144.032 461.205 mo
(1st-Partition)
[-6.08762 -4.69321 -4.01999 -3.67133 -6.20776 -5.75104 -4.1882 -4.02002 -2.7457 -4.02002 -2.7457 -6.32794 
0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.458 li
-170.569 652.458 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wk)21~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.458 li
-166.476 652.458 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wk)21~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.458 li
-162.384 652.458 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.295 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wk)21~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 7544 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/two 1006 def
end
PBAAAA+Calibri /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/QGKCBU+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 3{/.notdef}rp /one /two 14{/.notdef}rp 
/A /.notdef /C /D /.notdef /F 5{/.notdef}rp /L 
/M 2{/.notdef}rp /P 2{/.notdef}rp /S /.notdef /U 11{/.notdef}rp 
/a /b /.notdef /d /e /.notdef /g /.notdef 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
QGKCBU+Calibri nf
QGKCBU+Calibri*1 [0 -12.0213 -12.0213 0 0 0 ]msf
144.032 264.708 mo
(2nd-Partition)
[-6.08765 -6.30389 -6.30389 -3.6713 -6.20779 -5.75104 -4.1882 -4.01999 -2.74573 -4.01999 -2.74573 -6.32791 
0 ]ysh
gsave
-174.277 656.039 mo
-164.174 656.039 li
-164.046 656.167 li
-164.174 656.231 li
-174.277 656.231 li
-174.341 656.167 li
-174.277 656.039 li
clp
-174.661 656.551 mo
-174.661 652.458 li
-170.569 652.458 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<HY=A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-170.569 656.551 mo
-170.569 652.458 li
-166.476 652.458 li
-166.476 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 499.388 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<HY=A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-166.476 656.551 mo
-166.476 652.458 li
-162.384 652.458 li
-162.384 656.551 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 495.295 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<HY=A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
17.1047 589.602 mo
9.3036 589.602 li
9.3036 331.592 li
59.7548 331.592 li
0 0 0 .863462 cmyk
@
65.0621 331.592 mo
58.0283 335.109 li
58.0922 335.045 li
59.1793 332.871 59.1793 330.249 58.0922 328.011 cv
58.0283 328.075 li
65.0621 331.592 li
ef
gsave
-174.341 656.167 mo
-174.341 584.167 li
-174.277 584.039 li
-174.149 584.167 li
-174.149 656.167 li
-174.277 656.231 li
-174.341 656.167 li
clp
-174.661 656.551 mo
-174.661 652.458 li
-170.569 652.458 li
-170.569 656.551 li
cp
0 0 0 .27924 cmyk
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 656.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 652.458 mo
-174.661 648.366 li
-170.569 648.366 li
-170.569 652.458 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 652.458 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 648.366 mo
-174.661 644.274 li
-170.569 644.274 li
-170.569 648.366 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 648.366 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 644.274 mo
-174.661 640.181 li
-170.569 640.181 li
-170.569 644.274 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 644.274 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 640.181 mo
-174.661 636.089 li
-170.569 636.089 li
-170.569 640.181 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 640.181 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 636.089 mo
-174.661 631.997 li
-170.569 631.997 li
-170.569 636.089 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 636.089 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 631.997 mo
-174.661 627.904 li
-170.569 627.904 li
-170.569 631.997 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 631.997 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 627.904 mo
-174.661 623.812 li
-170.569 623.812 li
-170.569 627.904 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 627.904 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 623.812 mo
-174.661 619.72 li
-170.569 619.72 li
-170.569 623.812 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 623.812 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 619.72 mo
-174.661 615.627 li
-170.569 615.627 li
-170.569 619.72 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 619.72 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 615.627 mo
-174.661 611.535 li
-170.569 611.535 li
-170.569 615.627 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 615.627 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 611.535 mo
-174.661 607.443 li
-170.569 607.443 li
-170.569 611.535 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 611.535 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 607.443 mo
-174.661 603.35 li
-170.569 603.35 li
-170.569 607.443 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 607.443 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 603.35 mo
-174.661 599.258 li
-170.569 599.258 li
-170.569 603.35 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 603.35 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 599.258 mo
-174.661 595.165 li
-170.569 595.165 li
-170.569 599.258 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 599.258 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 595.165 mo
-174.661 591.073 li
-170.569 591.073 li
-170.569 595.165 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 595.165 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 591.073 mo
-174.661 586.981 li
-170.569 586.981 li
-170.569 591.073 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 591.073 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-174.661 586.981 mo
-174.661 582.888 li
-170.569 582.888 li
-170.569 586.981 li
cp
gsave
clp
[-1 0 0 1 328.819 0 ]ct
[0 -4.09235 -4.09235 0 503.48 586.981 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
[/Pattern [/146472552.0 /146472748.0 ]]
] del_res
/QGKCBU+Calibri*1 uf
/QGKCBU+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
